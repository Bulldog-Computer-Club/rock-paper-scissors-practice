{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0","program":"/home/elefant-i3/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rand","--edition=2018","/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"libc\"","--cfg","feature=\"rand_chacha\"","--cfg","feature=\"rand_hc\"","--cfg","feature=\"std\"","--cfg","feature=\"std_rng\"","-C","metadata=e486fd4f32f471cb","-C","extra-filename=-e486fd4f32f471cb","--out-dir","/home/elefant-i3/Downloads/git/Rust/target/rls/debug/deps","-L","dependency=/home/elefant-i3/Downloads/git/Rust/target/rls/debug/deps","--extern","libc=/home/elefant-i3/Downloads/git/Rust/target/rls/debug/deps/liblibc-d0d4a253fe4d6247.rmeta","--extern","rand_chacha=/home/elefant-i3/Downloads/git/Rust/target/rls/debug/deps/librand_chacha-4a06023353f2713c.rmeta","--extern","rand_core=/home/elefant-i3/Downloads/git/Rust/target/rls/debug/deps/librand_core-4ba363f409fe5ff2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/elefant-i3/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/elefant-i3/Downloads/git/Rust/target/rls/debug/deps/librand-e486fd4f32f471cb.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[14325917693619296874,12870909527535118622]},"crate_root":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src","external_crates":[{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9942249472390543209,15863006584859964888]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[1795893391416169141,8075121191677772249]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1572415099058457553,2135166978196155506]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[9744254129402482468,12445345062611050884]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13603829026942055011,2471063435589406066]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[3150535728137067081,14418570958612661587]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7556171729466642164,9608667095244489899]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[10806810126330215714,2553684360462883780]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1818097271180387350,15438349324121503308]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4437646126609693087,6536018436310544926]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11991037487279530558,3795792059683432706]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[1437858958743878161,787253638674005063]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4592710621585877372,1780610752140463821]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[6338654217379816643,7168927451833124687]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[18193432317814560663,14768114254071685082]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[12647259490832872807,4960225096531867135]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[8559662747993890479,3650412061717966503]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":18,"id":{"name":"rand_core","disambiguator":[8839589574090013376,10702121682043609814]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":19,"id":{"name":"getrandom","disambiguator":[2733575907190584814,11900908655760108617]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","num":20,"id":{"name":"cfg_if","disambiguator":[12588306261731180776,640031727072142967]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","num":21,"id":{"name":"libc","disambiguator":[1470949092046716866,2951687238319060064]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","num":22,"id":{"name":"rand_chacha","disambiguator":[2541799531302860000,7066997148847909676]}},{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","num":23,"id":{"name":"ppv_lite86","disambiguator":[42641305198177312,1950459345534719183]}}],"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":408,"byte_end":6743,"line_start":10,"line_end":215,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":145},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":2860,"byte_end":2869,"line_start":95,"line_end":95,"column_start":21,"column_end":30},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":77},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":2871,"byte_end":2876,"line_start":95,"line_end":95,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":140},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":2878,"byte_end":2885,"line_start":95,"line_end":95,"column_start":39,"column_end":46},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":146},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":2887,"byte_end":2898,"line_start":95,"line_end":95,"column_start":48,"column_end":59},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":749},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11194,"byte_end":11203,"line_start":99,"line_end":99,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":756},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11205,"byte_end":11219,"line_start":99,"line_end":99,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1167},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11244,"byte_end":11250,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1168},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11244,"byte_end":11250,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1160},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11252,"byte_end":11264,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1161},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11252,"byte_end":11264,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1236},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11288,"byte_end":11300,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1237},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11288,"byte_end":11300,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":770},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11340,"byte_end":11347,"line_start":102,"line_end":102,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1140},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11407,"byte_end":11420,"line_start":105,"line_end":105,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1129},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11422,"byte_end":11435,"line_start":105,"line_end":105,"column_start":47,"column_end":60},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1129},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89562,"byte_end":89575,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":155}},{"kind":"Use","ref_id":{"krate":0,"index":1140},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89577,"byte_end":89590,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":155}},{"kind":"Use","ref_id":{"krate":0,"index":202},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11859,"byte_end":11868,"line_start":122,"line_end":122,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":206}},{"kind":"Use","ref_id":{"krate":0,"index":310},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152606,"byte_end":152618,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":1946},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152766,"byte_end":152772,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":1960},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152863,"byte_end":152872,"line_start":29,"line_end":29,"column_start":22,"column_end":31},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":677},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152913,"byte_end":152927,"line_start":30,"line_end":30,"column_start":40,"column_end":54},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":649},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152929,"byte_end":152940,"line_start":30,"line_end":30,"column_start":56,"column_end":67},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":747},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":153027,"byte_end":153033,"line_start":33,"line_end":33,"column_start":17,"column_end":23},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":153035,"byte_end":153045,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":18,"index":145},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":153082,"byte_end":153091,"line_start":34,"line_end":34,"column_start":35,"column_end":44},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":363},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":153093,"byte_end":153096,"line_start":34,"line_end":34,"column_start":46,"column_end":49},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":18,"index":140},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":153098,"byte_end":153105,"line_start":34,"line_end":34,"column_start":51,"column_end":58},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":18,"index":146},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":153107,"byte_end":153118,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":333}},{"kind":"Use","ref_id":{"krate":0,"index":1906},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/mod.rs","byte_start":177907,"byte_end":177916,"line_start":14,"line_end":14,"column_start":22,"column_end":31},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":1900},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/mod.rs","byte_start":177918,"byte_end":177925,"line_start":14,"line_end":14,"column_start":33,"column_end":40},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":1911},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/mod.rs","byte_start":177953,"byte_end":177965,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":394}},{"kind":"Use","ref_id":{"krate":0,"index":1946},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":177263,"byte_end":177269,"line_start":115,"line_end":115,"column_start":48,"column_end":54},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":0,"index":1960},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":177343,"byte_end":177352,"line_start":116,"line_end":116,"column_start":73,"column_end":82},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":18,"index":202},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":177458,"byte_end":177463,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":393}},{"kind":"Use","ref_id":{"krate":18,"index":203},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":177458,"byte_end":177463,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":539}},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3094,"byte_end":3104,"line_start":106,"line_end":106,"column_start":30,"column_end":40},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":384},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3120,"byte_end":3124,"line_start":107,"line_end":107,"column_start":15,"column_end":19},"alias_span":null,"name":"Fill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":363},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3126,"byte_end":3129,"line_start":107,"line_end":107,"column_start":21,"column_end":24},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":408,"byte_end":6743,"line_start":10,"line_end":215,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":333},{"krate":0,"index":348},{"krate":0,"index":393},{"krate":0,"index":540},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":2320},{"krate":0,"index":747}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"/ Utilities for random number generation","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Quick Start","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ functionality on top of RNGs.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/ let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ nums.shuffle(&mut rng);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # The Book","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ For the user guide and further documentation, please read","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1394,"byte_end":1455,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"/ [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1456,"byte_end":1517,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1733,"byte_end":1755,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1756,"byte_end":1795,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"no_std","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":1857,"byte_end":1867,"line_start":51,"line_end":51,"column_start":1,"column_end":11}},{"value":"allow(clippy :: float_cmp, clippy :: neg_cmp_op_on_partial_ord,)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":2034,"byte_end":2108,"line_start":55,"line_end":58,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":16},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":2032},{"krate":0,"index":24},{"krate":0,"index":2034},{"krate":0,"index":25},{"krate":0,"index":2036},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":47},{"krate":0,"index":155},{"krate":0,"index":168},{"krate":0,"index":195},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":240},{"krate":0,"index":273},{"krate":0,"index":310},{"krate":0,"index":316},{"krate":0,"index":1603},{"krate":0,"index":1610},{"krate":0,"index":322},{"krate":0,"index":329},{"krate":0,"index":1615},{"krate":0,"index":1620},{"krate":0,"index":1619},{"krate":0,"index":1617}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"/ Generating random samples from probability distributions","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7153,"byte_end":7213,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7214,"byte_end":7217,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7218,"byte_end":7294,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ implementations. It is the workhorse behind some of the convenient","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7295,"byte_end":7365,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ functionality of the [`Rng`] trait, e.g. [`Rng::gen`] and of course","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7366,"byte_end":7437,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ [`Rng::sample`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7438,"byte_end":7458,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7459,"byte_end":7462,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7463,"byte_end":7536,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ occurrence of each value in its sample space.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7537,"byte_end":7586,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7587,"byte_end":7590,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7591,"byte_end":7669,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7670,"byte_end":7743,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ according to the distribution `X` represents, using an external source of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7744,"byte_end":7821,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ randomness (an RNG supplied to the `sample` function).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7822,"byte_end":7880,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7881,"byte_end":7884,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7885,"byte_end":7955,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":7956,"byte_end":8029,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ but it may have internal parameters set at construction time (for example,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8030,"byte_end":8108,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8109,"byte_end":8189,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8190,"byte_end":8193,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8194,"byte_end":8197,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # The `Standard` distribution","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8198,"byte_end":8231,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8232,"byte_end":8235,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8236,"byte_end":8306,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ distribution used by [`Rng::gen`] and represents the \"default\" way to","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8307,"byte_end":8380,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ produce a random value for many different types, including most primitive","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8381,"byte_end":8458,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8459,"byte_end":8535,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ [`Standard`] for more details.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8536,"byte_end":8570,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8571,"byte_end":8574,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8575,"byte_end":8654,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ possible to generate type `T` with [`Rng::gen`], and by extension also","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8655,"byte_end":8729,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ with the [`random`] function.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8730,"byte_end":8763,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8764,"byte_end":8767,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Random characters","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8768,"byte_end":8792,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8793,"byte_end":8796,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8797,"byte_end":8871,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8872,"byte_end":8949,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ `char`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8950,"byte_end":8961,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8962,"byte_end":8965,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8966,"byte_end":8969,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Uniform numeric ranges","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8970,"byte_end":8998,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":8999,"byte_end":9002,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9003,"byte_end":9080,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9081,"byte_end":9156,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9157,"byte_end":9232,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9233,"byte_end":9311,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9312,"byte_end":9315,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Values may be sampled from this distribution using [`Rng::sample(Range)`] or","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9316,"byte_end":9396,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ by creating a distribution object with [`Uniform::new`],","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9397,"byte_end":9457,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/ [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9458,"byte_end":9536,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ known at compile time it is typically faster to reuse an existing","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9537,"byte_end":9606,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ `Uniform` object than to call [`Rng::sample(Range)`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9607,"byte_end":9664,"line_start":61,"line_end":61,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9665,"byte_end":9668,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9669,"byte_end":9741,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9742,"byte_end":9814,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/ documentation in the [`uniform`] module). Doing so enables generation of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9815,"byte_end":9891,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ values of type `T` with  [`Rng::sample(Range)`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9892,"byte_end":9944,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9945,"byte_end":9948,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Open and half-open ranges","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9949,"byte_end":9981,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9982,"byte_end":9985,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":9986,"byte_end":10061,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10062,"byte_end":10138,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"/ and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10139,"byte_end":10220,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"/ [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10221,"byte_end":10304,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"/ [`Standard`] documentation for more details.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10305,"byte_end":10353,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10354,"byte_end":10357,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Non-uniform sampling","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10358,"byte_end":10384,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10385,"byte_end":10388,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10389,"byte_end":10466,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10467,"byte_end":10538,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10539,"byte_end":10542,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10543,"byte_end":10612,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"/ [`WeightedIndex`] distribution.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10613,"byte_end":10648,"line_start":82,"line_end":82,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10649,"byte_end":10652,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10653,"byte_end":10727,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10728,"byte_end":10799,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10800,"byte_end":10803,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10804,"byte_end":10807,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10808,"byte_end":10894,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10895,"byte_end":10950,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":10951,"byte_end":10998,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ [`random`]: crate::random","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11000,"byte_end":11029,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11030,"byte_end":11085,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11086,"byte_end":11133,"line_start":94,"line_end":94,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":749},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21505,"byte_end":21514,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":750}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":20863,"byte_end":20894,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":20895,"byte_end":20898,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":20899,"byte_end":20969,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":20970,"byte_end":20973,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":20974,"byte_end":20987,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":20988,"byte_end":20991,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":20992,"byte_end":21003,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21004,"byte_end":21059,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21060,"byte_end":21063,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21064,"byte_end":21105,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21106,"byte_end":21152,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21153,"byte_end":21208,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21209,"byte_end":21216,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21217,"byte_end":21220,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21221,"byte_end":21236,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21237,"byte_end":21240,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21241,"byte_end":21311,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21312,"byte_end":21382,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":21383,"byte_end":21399,"line_start":35,"line_end":35,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":757},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":22979,"byte_end":22997,"line_start":72,"line_end":72,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":756},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":22951,"byte_end":22974,"line_start":71,"line_end":71,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":756},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":22930,"byte_end":22944,"line_start":70,"line_end":70,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"pub enum BernoulliError {\n\n    /// `p < 0` or `p > 1`.\n    InvalidProbability,\n}","parent":null,"children":[{"krate":0,"index":757}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":22829,"byte_end":22875,"line_start":68,"line_end":68,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23868,"byte_end":23871,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"pub fn new(f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23349,"byte_end":23423,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23428,"byte_end":23431,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23436,"byte_end":23451,"line_start":89,"line_end":89,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23456,"byte_end":23459,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23464,"byte_end":23536,"line_start":91,"line_end":91,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23541,"byte_end":23614,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23619,"byte_end":23622,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23627,"byte_end":23703,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23708,"byte_end":23774,"line_start":95,"line_end":95,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23779,"byte_end":23842,"line_start":96,"line_end":96,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23847,"byte_end":23856,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24752,"byte_end":24762,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"pub fn from_ratio(u32, u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24210,"byte_end":24276,"line_start":110,"line_end":110,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24281,"byte_end":24349,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24354,"byte_end":24428,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24433,"byte_end":24436,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24441,"byte_end":24510,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ For `numerator > denominator` and `denominator == 0`, this returns an","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24515,"byte_end":24588,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ error. Otherwise, for `numerator == denominator`, samples are always","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24593,"byte_end":24665,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ true; for `numerator == 0` samples are always false.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24670,"byte_end":24726,"line_start":117,"line_end":117,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":24731,"byte_end":24740,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":47},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":770},{"krate":0,"index":779},{"krate":0,"index":777},{"krate":0,"index":774},{"krate":0,"index":62},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":782},{"krate":0,"index":792},{"krate":0,"index":790},{"krate":0,"index":787},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":815},{"krate":0,"index":817},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":875},{"krate":0,"index":877},{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":955},{"krate":0,"index":957},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":995},{"krate":0,"index":997},{"krate":0,"index":1015},{"krate":0,"index":1017},{"krate":0,"index":126},{"krate":0,"index":1035},{"krate":0,"index":1040},{"krate":0,"index":1039},{"krate":0,"index":1037},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":1042},{"krate":0,"index":1051},{"krate":0,"index":1049},{"krate":0,"index":1046},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1086},{"krate":0,"index":1092},{"krate":0,"index":1091},{"krate":0,"index":1089},{"krate":0,"index":1094},{"krate":0,"index":1107},{"krate":0,"index":1106},{"krate":0,"index":1104},{"krate":0,"index":142},{"krate":0,"index":144}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"/ A distribution uniformly sampling numbers within a given range.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28068,"byte_end":28135,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28136,"byte_end":28139,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28140,"byte_end":28218,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28219,"byte_end":28298,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28299,"byte_end":28366,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ [`Uniform`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28367,"byte_end":28383,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28384,"byte_end":28387,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This distribution is provided with support for several primitive types","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28388,"byte_end":28462,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28463,"byte_end":28541,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28542,"byte_end":28621,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ implementation.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28622,"byte_end":28641,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28642,"byte_end":28645,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28646,"byte_end":28724,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28725,"byte_end":28800,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28801,"byte_end":28880,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ need to be used directly (unless implementing a derived back-end).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28881,"byte_end":28951,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28952,"byte_end":28955,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example usage","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28956,"byte_end":28975,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28976,"byte_end":28979,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28980,"byte_end":28987,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":28988,"byte_end":29020,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29021,"byte_end":29058,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29059,"byte_end":29062,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29063,"byte_end":29094,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29095,"byte_end":29136,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29137,"byte_end":29140,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // sample between 1 and 10 points","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29141,"byte_end":29178,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ for _ in 0..rng.gen_range(1..=10) {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29179,"byte_end":29218,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29219,"byte_end":29298,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29299,"byte_end":29357,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"/     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29358,"byte_end":29398,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29399,"byte_end":29404,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29405,"byte_end":29412,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29413,"byte_end":29416,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Extending `Uniform` to support a custom type","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29417,"byte_end":29467,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29468,"byte_end":29471,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29472,"byte_end":29547,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29548,"byte_end":29629,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"/ helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29630,"byte_end":29706,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29707,"byte_end":29710,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29711,"byte_end":29791,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29792,"byte_end":29870,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29871,"byte_end":29947,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ `low < high`). The example below merely wraps another back-end.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":29948,"byte_end":30015,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30016,"byte_end":30019,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30020,"byte_end":30097,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30098,"byte_end":30176,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ by value. In the implementation of these functions, you can choose to","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30177,"byte_end":30250,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30251,"byte_end":30335,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30336,"byte_end":30406,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30407,"byte_end":30410,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30411,"byte_end":30418,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30419,"byte_end":30444,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30445,"byte_end":30507,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30508,"byte_end":30564,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30565,"byte_end":30568,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ struct MyF32(f32);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30569,"byte_end":30591,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30592,"byte_end":30595,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone, Copy, Debug)]","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30596,"byte_end":30629,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30630,"byte_end":30673,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30674,"byte_end":30677,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ impl UniformSampler for UniformMyF32 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30678,"byte_end":30720,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"/     type X = MyF32;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30721,"byte_end":30744,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30745,"byte_end":30794,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30795,"byte_end":30847,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30848,"byte_end":30899,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30900,"byte_end":30909,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30910,"byte_end":30993,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/     }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":30994,"byte_end":31003,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"/     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31004,"byte_end":31063,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31064,"byte_end":31116,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31117,"byte_end":31168,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31169,"byte_end":31178,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"/         UniformSampler::new(low, high)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31179,"byte_end":31221,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/     }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31222,"byte_end":31231,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31232,"byte_end":31299,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/         MyF32(self.0.sample(rng))","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31300,"byte_end":31337,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31338,"byte_end":31347,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31348,"byte_end":31353,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31354,"byte_end":31357,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ impl SampleUniform for MyF32 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31358,"byte_end":31392,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/     type Sampler = UniformMyF32;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31393,"byte_end":31429,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31430,"byte_end":31435,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31436,"byte_end":31439,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31440,"byte_end":31495,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/ let uniform = Uniform::new(low, high);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31496,"byte_end":31538,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"/ let x = uniform.sample(&mut thread_rng());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31539,"byte_end":31585,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31586,"byte_end":31593,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31594,"byte_end":31597,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31598,"byte_end":31665,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"/ [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31666,"byte_end":31735,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/ [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31736,"byte_end":31797,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"/ [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31798,"byte_end":31863,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31864,"byte_end":31935,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/ [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":31936,"byte_end":32017,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":770},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34617,"byte_end":34624,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":32635,"byte_end":32682,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":32683,"byte_end":32686,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":32687,"byte_end":32758,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":32759,"byte_end":32835,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster. If only one sample","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":32836,"byte_end":32916,"line_start":128,"line_end":128,"column_start":1,"column_end":81}},{"value":"/ from the range is required, [`Rng::gen_range`] can be more efficient.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":32917,"byte_end":32990,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":32991,"byte_end":32994,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":32995,"byte_end":33067,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33068,"byte_end":33146,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33147,"byte_end":33225,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33226,"byte_end":33258,"line_start":134,"line_end":134,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33259,"byte_end":33262,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33263,"byte_end":33328,"line_start":136,"line_end":136,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33329,"byte_end":33408,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33409,"byte_end":33488,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33489,"byte_end":33568,"line_start":139,"line_end":139,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33569,"byte_end":33646,"line_start":140,"line_end":140,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33647,"byte_end":33691,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33692,"byte_end":33695,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33696,"byte_end":33754,"line_start":143,"line_end":143,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular, care must","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33755,"byte_end":33834,"line_start":144,"line_end":144,"column_start":1,"column_end":80}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33835,"byte_end":33914,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33915,"byte_end":33918,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33919,"byte_end":33932,"line_start":147,"line_end":147,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33933,"byte_end":33936,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33937,"byte_end":33944,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33945,"byte_end":33998,"line_start":150,"line_end":150,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":33999,"byte_end":34002,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ let between = Uniform::from(10..10000);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34003,"byte_end":34046,"line_start":152,"line_end":152,"column_start":1,"column_end":44}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34047,"byte_end":34084,"line_start":153,"line_end":153,"column_start":1,"column_end":38}},{"value":"/ let mut sum = 0;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34085,"byte_end":34105,"line_start":154,"line_end":154,"column_start":1,"column_end":21}},{"value":"/ for _ in 0..1000 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34106,"byte_end":34128,"line_start":155,"line_end":155,"column_start":1,"column_end":23}},{"value":"/     sum += between.sample(&mut rng);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34129,"byte_end":34169,"line_start":156,"line_end":156,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34170,"byte_end":34175,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34176,"byte_end":34200,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34201,"byte_end":34208,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34209,"byte_end":34212,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For a single sample, [`Rng::gen_range`] may be prefered:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34213,"byte_end":34273,"line_start":161,"line_end":161,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34274,"byte_end":34277,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34278,"byte_end":34285,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34286,"byte_end":34304,"line_start":164,"line_end":164,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34305,"byte_end":34308,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34309,"byte_end":34346,"line_start":166,"line_end":166,"column_start":1,"column_end":38}},{"value":"/ println!(\"{}\", rng.gen_range(0..10));","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34347,"byte_end":34388,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34389,"byte_end":34396,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34397,"byte_end":34400,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34401,"byte_end":34426,"line_start":170,"line_end":170,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34427,"byte_end":34472,"line_start":171,"line_end":171,"column_start":1,"column_end":46}},{"value":"/ [`Rng::gen_range`]: Rng::gen_range","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34473,"byte_end":34511,"line_start":172,"line_end":172,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34860,"byte_end":34863,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"pub fn new<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> + Sized,\nB2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34697,"byte_end":34770,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34775,"byte_end":34848,"line_start":179,"line_end":179,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35202,"byte_end":35215,"line_start":190,"line_end":190,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> +\nSized, B2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35050,"byte_end":35125,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35130,"byte_end":35190,"line_start":189,"line_end":189,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35861,"byte_end":35874,"line_start":212,"line_end":212,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":75}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35560,"byte_end":35633,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35634,"byte_end":35679,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35680,"byte_end":35683,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35684,"byte_end":35756,"line_start":208,"line_end":208,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35757,"byte_end":35788,"line_start":209,"line_end":209,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35789,"byte_end":35792,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35793,"byte_end":35850,"line_start":211,"line_end":211,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35958,"byte_end":35965,"line_start":214,"line_end":214,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35888,"byte_end":35948,"line_start":213,"line_end":213,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":76},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36440,"byte_end":36454,"line_start":227,"line_end":227,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":90}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35996,"byte_end":36046,"line_start":217,"line_end":217,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36047,"byte_end":36050,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36051,"byte_end":36123,"line_start":219,"line_end":219,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36124,"byte_end":36155,"line_start":220,"line_end":220,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36156,"byte_end":36159,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36160,"byte_end":36236,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36237,"byte_end":36314,"line_start":223,"line_end":223,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36315,"byte_end":36318,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36319,"byte_end":36376,"line_start":225,"line_end":225,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36377,"byte_end":36429,"line_start":226,"line_end":226,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36522,"byte_end":36523,"line_start":229,"line_end":229,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36468,"byte_end":36512,"line_start":228,"line_end":228,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36786,"byte_end":36789,"line_start":236,"line_end":236,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"pub fn new<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36530,"byte_end":36602,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36607,"byte_end":36625,"line_start":232,"line_end":232,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36630,"byte_end":36633,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36638,"byte_end":36701,"line_start":234,"line_end":234,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36706,"byte_end":36778,"line_start":235,"line_end":235,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37162,"byte_end":37175,"line_start":246,"line_end":246,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> +\nSized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36926,"byte_end":36982,"line_start":241,"line_end":241,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36987,"byte_end":36990,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36995,"byte_end":37058,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37063,"byte_end":37132,"line_start":244,"line_end":244,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37137,"byte_end":37154,"line_start":245,"line_end":245,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37339,"byte_end":37345,"line_start":252,"line_end":252,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> Self::X","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37312,"byte_end":37331,"line_start":251,"line_end":251,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38320,"byte_end":38333,"line_start":273,"line_end":273,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"pub fn sample_single<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R) -> Self::X where\nB1: SampleBorrow<Self::X> + Sized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37400,"byte_end":37475,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37480,"byte_end":37524,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37529,"byte_end":37532,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37537,"byte_end":37577,"line_start":257,"line_end":257,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37582,"byte_end":37655,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37660,"byte_end":37734,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37739,"byte_end":37794,"line_start":260,"line_end":260,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37799,"byte_end":37832,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37837,"byte_end":37840,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37845,"byte_end":37920,"line_start":263,"line_end":263,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37925,"byte_end":37979,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37984,"byte_end":37991,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":37996,"byte_end":38080,"line_start":266,"line_end":266,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38085,"byte_end":38107,"line_start":267,"line_end":267,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38112,"byte_end":38175,"line_start":268,"line_end":268,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38180,"byte_end":38215,"line_start":269,"line_end":269,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38220,"byte_end":38290,"line_start":270,"line_end":270,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38295,"byte_end":38300,"line_start":271,"line_end":271,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38305,"byte_end":38312,"line_start":272,"line_end":272,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39009,"byte_end":39032,"line_start":290,"line_end":290,"column_start":8,"column_end":31},"name":"sample_single_inclusive","qualname":"::distributions::uniform::UniformSampler::sample_single_inclusive","value":"pub fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R)\n-> Self::X where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and inclusive upper bound `[low, high]`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38603,"byte_end":38678,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/ and inclusive upper bound `[low, high]`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38683,"byte_end":38727,"line_start":283,"line_end":283,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38732,"byte_end":38735,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38740,"byte_end":38780,"line_start":285,"line_end":285,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new_inclusive(low, high).sample(rng)`. However, for","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38785,"byte_end":38857,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ some types more optimal implementations for single usage may be provided","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38862,"byte_end":38938,"line_start":287,"line_end":287,"column_start":5,"column_end":81}},{"value":"/ via this method.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38943,"byte_end":38963,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/ Results may not be identical.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":38968,"byte_end":39001,"line_start":289,"line_end":289,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":100},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39868,"byte_end":39880,"line_start":318,"line_end":318,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":102}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39662,"byte_end":39716,"line_start":313,"line_end":313,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39717,"byte_end":39778,"line_start":314,"line_end":314,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39779,"byte_end":39817,"line_start":315,"line_end":315,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39818,"byte_end":39821,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39822,"byte_end":39857,"line_start":317,"line_end":317,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40034,"byte_end":40040,"line_start":322,"line_end":322,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"pub fn borrow(&Self) -> &Borrowed","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39897,"byte_end":39962,"line_start":319,"line_end":319,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39967,"byte_end":39970,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39975,"byte_end":40026,"line_start":321,"line_end":321,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40580,"byte_end":40591,"line_start":345,"line_end":345,"column_start":11,"column_end":22},"name":"SampleRange","qualname":"::distributions::uniform::SampleRange","value":"SampleRange<T>","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114}],"decl_id":null,"docs":" Range that supports generating a single sample efficiently.","sig":null,"attributes":[{"value":"/ Range that supports generating a single sample efficiently.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40398,"byte_end":40461,"line_start":341,"line_end":341,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40462,"byte_end":40465,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ Any type implementing this trait can be used to specify the sampled range","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40466,"byte_end":40543,"line_start":343,"line_end":343,"column_start":1,"column_end":78}},{"value":"/ for `Rng::gen_range`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40544,"byte_end":40569,"line_start":344,"line_end":344,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40652,"byte_end":40665,"line_start":347,"line_end":347,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::SampleRange::sample_single","value":"pub fn sample_single<R: RngCore + ?Sized>(Self, &mut R) -> T","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" Generate a sample from the given range.\n","sig":null,"attributes":[{"value":"/ Generate a sample from the given range.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40601,"byte_end":40644,"line_start":346,"line_end":346,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40762,"byte_end":40770,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::distributions::uniform::SampleRange::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" Check whether the range is empty.\n","sig":null,"attributes":[{"value":"/ Check whether the range is empty.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40717,"byte_end":40754,"line_start":349,"line_end":349,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":782},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":43557,"byte_end":43567,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41548,"byte_end":41615,"line_start":383,"line_end":383,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41616,"byte_end":41619,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41620,"byte_end":41699,"line_start":385,"line_end":385,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41700,"byte_end":41757,"line_start":386,"line_end":386,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41758,"byte_end":41761,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41762,"byte_end":41788,"line_start":388,"line_end":388,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41789,"byte_end":41792,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41793,"byte_end":41867,"line_start":390,"line_end":390,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41868,"byte_end":41948,"line_start":391,"line_end":391,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41949,"byte_end":42029,"line_start":392,"line_end":392,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42030,"byte_end":42033,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42034,"byte_end":42110,"line_start":394,"line_end":394,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42111,"byte_end":42189,"line_start":395,"line_end":395,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42190,"byte_end":42266,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42267,"byte_end":42320,"line_start":397,"line_end":397,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42321,"byte_end":42324,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42325,"byte_end":42401,"line_start":399,"line_end":399,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42402,"byte_end":42465,"line_start":400,"line_end":400,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42466,"byte_end":42469,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42470,"byte_end":42544,"line_start":402,"line_end":402,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42545,"byte_end":42625,"line_start":403,"line_end":403,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42626,"byte_end":42712,"line_start":404,"line_end":404,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42713,"byte_end":42790,"line_start":405,"line_end":405,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42791,"byte_end":42862,"line_start":406,"line_end":406,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42863,"byte_end":42866,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42867,"byte_end":42945,"line_start":408,"line_end":408,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":42946,"byte_end":43023,"line_start":409,"line_end":409,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":43024,"byte_end":43103,"line_start":410,"line_end":410,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":43104,"byte_end":43178,"line_start":411,"line_end":411,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":43179,"byte_end":43226,"line_start":412,"line_end":412,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":43227,"byte_end":43230,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":43231,"byte_end":43307,"line_start":414,"line_end":414,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":43308,"byte_end":43387,"line_start":415,"line_end":415,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":43388,"byte_end":43451,"line_start":416,"line_end":416,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1035},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55594,"byte_end":55605,"line_start":724,"line_end":724,"column_start":12,"column_end":23},"name":"UniformChar","qualname":"::distributions::uniform::UniformChar","value":"UniformChar {  }","parent":null,"children":[{"krate":0,"index":1036}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `char`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `char`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55036,"byte_end":55096,"line_start":713,"line_end":713,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55097,"byte_end":55100,"line_start":714,"line_end":714,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55101,"byte_end":55180,"line_start":715,"line_end":715,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55181,"byte_end":55238,"line_start":716,"line_end":716,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55239,"byte_end":55242,"line_start":717,"line_end":717,"column_start":1,"column_end":4}},{"value":"/ This differs from integer range sampling since the range `0xD800..=0xDFFF`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55243,"byte_end":55321,"line_start":718,"line_end":718,"column_start":1,"column_end":79}},{"value":"/ are used for surrogate pairs in UCS and UTF-16, and consequently are not","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55322,"byte_end":55398,"line_start":719,"line_end":719,"column_start":1,"column_end":77}},{"value":"/ valid Unicode code points. We must therefore avoid sampling values in this","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55399,"byte_end":55477,"line_start":720,"line_end":720,"column_start":1,"column_end":79}},{"value":"/ range.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":55478,"byte_end":55488,"line_start":721,"line_end":721,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1042},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":58477,"byte_end":58489,"line_start":803,"line_end":803,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57487,"byte_end":57561,"line_start":782,"line_end":782,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57562,"byte_end":57565,"line_start":783,"line_end":783,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57566,"byte_end":57645,"line_start":784,"line_end":784,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57646,"byte_end":57703,"line_start":785,"line_end":785,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57704,"byte_end":57707,"line_start":786,"line_end":786,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57708,"byte_end":57734,"line_start":787,"line_end":787,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57735,"byte_end":57738,"line_start":788,"line_end":788,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57739,"byte_end":57818,"line_start":789,"line_end":789,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57819,"byte_end":57896,"line_start":790,"line_end":790,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57897,"byte_end":57943,"line_start":791,"line_end":791,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57944,"byte_end":57947,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":57948,"byte_end":58026,"line_start":793,"line_end":793,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":58027,"byte_end":58099,"line_start":794,"line_end":794,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 23 bits of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":58100,"byte_end":58179,"line_start":795,"line_end":795,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":58180,"byte_end":58232,"line_start":796,"line_end":796,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":58233,"byte_end":58236,"line_start":797,"line_end":797,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":58237,"byte_end":58269,"line_start":798,"line_end":798,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":58270,"byte_end":58322,"line_start":799,"line_end":799,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":58323,"byte_end":58371,"line_start":800,"line_end":800,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1086},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":66617,"byte_end":66632,"line_start":997,"line_end":997,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1087},{"krate":0,"index":1088}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":66304,"byte_end":66368,"line_start":991,"line_end":991,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":66369,"byte_end":66372,"line_start":992,"line_end":992,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":66373,"byte_end":66453,"line_start":993,"line_end":993,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":66454,"byte_end":66511,"line_start":994,"line_end":994,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":155},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"decl_id":null,"docs":" Weighted index sampling","sig":null,"attributes":[{"value":"deprecated(since = \"0.8.0\", note =\n             \"use rand::distributions::{WeightedIndex, WeightedError} instead\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11472,"byte_end":11576,"line_start":110,"line_end":110,"column_start":1,"column_end":105}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11577,"byte_end":11602,"line_start":111,"line_end":111,"column_start":1,"column_end":26}},{"value":"/ Weighted index sampling","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89381,"byte_end":89408,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89409,"byte_end":89412,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module is deprecated. Use [`crate::distributions::WeightedIndex`] and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89413,"byte_end":89491,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ [`crate::distributions::WeightedError`] instead.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89492,"byte_end":89544,"line_start":12,"line_end":12,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":159},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89692,"byte_end":89704,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":2078},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89594,"byte_end":89616,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"deprecated(since = \"0.8.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89617,"byte_end":89683,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1109},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":89973,"byte_end":89986,"line_start":26,"line_end":26,"column_start":16,"column_end":29},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1111}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":90094,"byte_end":90097,"line_start":30,"line_end":30,"column_start":16,"column_end":19},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"pub fn new(Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":166},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":90219,"byte_end":90225,"line_start":35,"line_end":35,"column_start":15,"column_end":21},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1129},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93940,"byte_end":93953,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted_index::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133}],"decl_id":null,"docs":" A distribution using weighted sampling of discrete items","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling of discrete items","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91336,"byte_end":91396,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91397,"byte_end":91400,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Sampling a `WeightedIndex` distribution returns the index of a randomly","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91401,"byte_end":91476,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ selected element from the iterator used when the `WeightedIndex` was","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91477,"byte_end":91549,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ created. The chance of a given element being picked is proportional to the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91550,"byte_end":91628,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ value of the element. The weights can use any type `X` for which an","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91629,"byte_end":91700,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91701,"byte_end":91745,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91746,"byte_end":91749,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91750,"byte_end":91767,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91768,"byte_end":91771,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Time complexity of sampling from `WeightedIndex` is `O(log N)` where","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91772,"byte_end":91844,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ `N` is the number of weights. As an alternative,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91845,"byte_end":91897,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/ [`rand_distr::weighted_alias`](https://docs.rs/rand_distr/*/rand_distr/weighted_alias/index.html)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":91898,"byte_end":91999,"line_start":35,"line_end":35,"column_start":1,"column_end":102}},{"value":"/ supports `O(1)` sampling, but with much higher initialisation cost.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92000,"byte_end":92071,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92072,"byte_end":92075,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ A `WeightedIndex<X>` contains a `Vec<X>` and a [`Uniform<X>`] and so its","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92076,"byte_end":92152,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ size is the sum of the size of those objects, possibly plus some alignment.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92153,"byte_end":92232,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92233,"byte_end":92236,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Creating a `WeightedIndex<X>` will allocate enough space to hold `N - 1`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92237,"byte_end":92313,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ weights of type `X`, where `N` is the number of weights. However, since","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92314,"byte_end":92389,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ `Vec` doesn't guarantee a particular growth strategy, additional memory","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92390,"byte_end":92465,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ might be allocated but not used. Since the `WeightedIndex` object also","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92466,"byte_end":92540,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ contains, this might cause additional allocations, though for primitive","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92541,"byte_end":92616,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ types, [`Uniform<X>`] doesn't allocate any memory.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92617,"byte_end":92671,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92672,"byte_end":92675,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Sampling from `WeightedIndex` will result in a single call to","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92676,"byte_end":92741,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ `Uniform<X>::sample` (method of the [`Distribution`] trait), which typically","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92742,"byte_end":92822,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ will request a single value from the underlying [`RngCore`], though the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92823,"byte_end":92898,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ exact number depends on the implementation of `Uniform<X>::sample`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92899,"byte_end":92970,"line_start":51,"line_end":51,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92971,"byte_end":92974,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92975,"byte_end":92988,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92989,"byte_end":92992,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":92993,"byte_end":93000,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93001,"byte_end":93026,"line_start":56,"line_end":56,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::WeightedIndex;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93027,"byte_end":93070,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93071,"byte_end":93074,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let choices = ['a', 'b', 'c'];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93075,"byte_end":93109,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/ let weights = [2,   1,   1];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93110,"byte_end":93142,"line_start":60,"line_end":60,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(&weights).unwrap();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93143,"byte_end":93196,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93197,"byte_end":93228,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93229,"byte_end":93250,"line_start":63,"line_end":63,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93251,"byte_end":93335,"line_start":64,"line_end":64,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93336,"byte_end":93391,"line_start":65,"line_end":65,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93392,"byte_end":93397,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93398,"byte_end":93401,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93402,"byte_end":93449,"line_start":68,"line_end":68,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93450,"byte_end":93527,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ for _ in 0..100 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93528,"byte_end":93549,"line_start":70,"line_end":70,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93550,"byte_end":93633,"line_start":71,"line_end":71,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93634,"byte_end":93690,"line_start":72,"line_end":72,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93691,"byte_end":93696,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93697,"byte_end":93704,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93705,"byte_end":93708,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ [`Uniform<X>`]: crate::distributions::Uniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93709,"byte_end":93758,"line_start":76,"line_end":76,"column_start":1,"column_end":50}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":93759,"byte_end":93790,"line_start":77,"line_end":77,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94527,"byte_end":94530,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"pub fn new<I>(I) -> Result<WeightedIndex<X>, WeightedError> where\nI: IntoIterator, I::Item: SampleBorrow<X>,\nX: for<'a> ::core::ops::AddAssign<&'a X> + Clone + Default","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[{"value":"/ Creates a new a `WeightedIndex` [`Distribution`] using the values","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94139,"byte_end":94208,"line_start":88,"line_end":88,"column_start":5,"column_end":74}},{"value":"/ in `weights`. The weights can use any type `X` for which an","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94213,"byte_end":94276,"line_start":89,"line_end":89,"column_start":5,"column_end":68}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94281,"byte_end":94325,"line_start":90,"line_end":90,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94330,"byte_end":94333,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the iterator is empty, if any weight is `< 0`, or","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94338,"byte_end":94411,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/ if its total value is 0.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94416,"byte_end":94444,"line_start":93,"line_end":93,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94449,"byte_end":94452,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94457,"byte_end":94515,"line_start":95,"line_end":95,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":96218,"byte_end":96232,"line_start":142,"line_end":142,"column_start":12,"column_end":26},"name":"update_weights","qualname":"<WeightedIndex<X>>::update_weights","value":"pub fn update_weights(&mut Self, &[(usize, &X)]) -> Result<(), WeightedError>\nwhere X: for<'a> ::core::ops::AddAssign<&'a X> +\nfor<'a> ::core::ops::SubAssign<&'a X> + Clone + Default","parent":null,"children":[],"decl_id":null,"docs":" Update a subset of weights, without changing the number of weights.","sig":null,"attributes":[{"value":"/ Update a subset of weights, without changing the number of weights.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":95795,"byte_end":95866,"line_start":133,"line_end":133,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":95871,"byte_end":95874,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ `new_weights` must be sorted by the index.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":95879,"byte_end":95925,"line_start":135,"line_end":135,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":95930,"byte_end":95933,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Using this method instead of `new` might be more efficient if only a small number of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":95938,"byte_end":96026,"line_start":137,"line_end":137,"column_start":5,"column_end":93}},{"value":"/ weights is modified. No allocations are performed, unless the weight type `X` uses","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":96031,"byte_end":96117,"line_start":138,"line_end":138,"column_start":5,"column_end":91}},{"value":"/ allocation internally.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":96122,"byte_end":96148,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":96153,"byte_end":96156,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ In case of error, `self` is not modified.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":96161,"byte_end":96206,"line_start":141,"line_end":141,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1141},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":105843,"byte_end":105849,"line_start":428,"line_end":428,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted_index::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[{"value":"/ The provided weight collection contains no items.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":105785,"byte_end":105838,"line_start":427,"line_end":427,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1143},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":105970,"byte_end":105983,"line_start":432,"line_end":432,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted_index::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum,\n NaN, or otherwise invalid.\n","sig":null,"attributes":[{"value":"/ A weight is either less than zero, greater than the supported maximum,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":105856,"byte_end":105930,"line_start":430,"line_end":430,"column_start":5,"column_end":79}},{"value":"/ NaN, or otherwise invalid.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":105935,"byte_end":105965,"line_start":431,"line_end":431,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1145},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":106052,"byte_end":106066,"line_start":435,"line_end":435,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted_index::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[{"value":"/ All items in the provided weight collection are zero.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":105990,"byte_end":106047,"line_start":434,"line_end":434,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1147},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":106144,"byte_end":106151,"line_start":438,"line_end":438,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted_index::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":1140},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[{"value":"/ Too many weights are provided (length greater than `u32::MAX`)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":106073,"byte_end":106139,"line_start":437,"line_end":437,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":1140},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":105765,"byte_end":105778,"line_start":426,"line_end":426,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted_index::WeightedError","value":"pub enum WeightedError {\n\n    /// The provided weight collection contains no items.\n    NoItem,\n\n    /// A weight is either less than zero, greater than the supported maximum,\n    /// NaN, or otherwise invalid.\n    InvalidWeight,\n\n    /// All items in the provided weight collection are zero.\n    AllWeightsZero,\n\n    /// Too many weights are provided (length greater than `u32::MAX`)\n    TooMany,\n}","parent":null,"children":[{"krate":0,"index":1141},{"krate":0,"index":1143},{"krate":0,"index":1145},{"krate":0,"index":1147}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `WeightedIndex::new`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":105610,"byte_end":105660,"line_start":423,"line_end":423,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1160},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108352,"byte_end":108364,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107335,"byte_end":107413,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107414,"byte_end":107464,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107465,"byte_end":107468,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107469,"byte_end":107543,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107544,"byte_end":107621,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107622,"byte_end":107695,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107696,"byte_end":107722,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107723,"byte_end":107726,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107727,"byte_end":107793,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107794,"byte_end":107870,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107871,"byte_end":107882,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107883,"byte_end":107886,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107887,"byte_end":107900,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107901,"byte_end":107908,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107909,"byte_end":107941,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107942,"byte_end":107984,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107985,"byte_end":107988,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":107989,"byte_end":108042,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108043,"byte_end":108084,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108085,"byte_end":108092,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108093,"byte_end":108096,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108097,"byte_end":108145,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108146,"byte_end":108190,"line_start":42,"line_end":42,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108191,"byte_end":108246,"line_start":43,"line_end":43,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1167},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109359,"byte_end":109365,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108367,"byte_end":108440,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108441,"byte_end":108499,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108500,"byte_end":108503,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108504,"byte_end":108583,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ the 23 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108584,"byte_end":108663,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108664,"byte_end":108723,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108724,"byte_end":108727,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108728,"byte_end":108800,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108801,"byte_end":108877,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108878,"byte_end":108889,"line_start":57,"line_end":57,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108890,"byte_end":108893,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108894,"byte_end":108907,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108908,"byte_end":108915,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108916,"byte_end":108948,"line_start":61,"line_end":61,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108949,"byte_end":108985,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108986,"byte_end":108989,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":108990,"byte_end":109037,"line_start":64,"line_end":64,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109038,"byte_end":109079,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109080,"byte_end":109087,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109088,"byte_end":109091,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109092,"byte_end":109140,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109141,"byte_end":109197,"line_start":69,"line_end":69,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109198,"byte_end":109253,"line_start":70,"line_end":70,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":202},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109475,"byte_end":109484,"line_start":78,"line_end":78,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":203},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109496,"byte_end":109497,"line_start":79,"line_end":79,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109899,"byte_end":109923,"line_start":89,"line_end":89,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"pub fn into_float_with_exponent(Self, i32) -> Self::F","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a contant exponent into a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109504,"byte_end":109575,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/ float.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109580,"byte_end":109590,"line_start":82,"line_end":82,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109595,"byte_end":109598,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109603,"byte_end":109677,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109682,"byte_end":109699,"line_start":85,"line_end":85,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109704,"byte_end":109778,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109783,"byte_end":109834,"line_start":87,"line_end":87,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/float.rs","byte_start":109839,"byte_end":109891,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":206},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11817,"byte_end":11830,"line_start":121,"line_end":121,"column_start":9,"column_end":22},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":207}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1236},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":130427,"byte_end":130439,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `u8`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.","sig":null,"attributes":[{"value":"/ Sample a `u8`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":128975,"byte_end":129047,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129048,"byte_end":129069,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129070,"byte_end":129073,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129074,"byte_end":129087,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129088,"byte_end":129091,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129092,"byte_end":129099,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129100,"byte_end":129118,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129119,"byte_end":129151,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129152,"byte_end":129194,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129195,"byte_end":129198,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129199,"byte_end":129230,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129231,"byte_end":129271,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129272,"byte_end":129319,"line_start":34,"line_end":34,"column_start":1,"column_end":48}},{"value":"/         .map(char::from)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129320,"byte_end":129348,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/         .take(7)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129349,"byte_end":129369,"line_start":36,"line_end":36,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129370,"byte_end":129393,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129394,"byte_end":129434,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129435,"byte_end":129442,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129443,"byte_end":129446,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Passwords","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129447,"byte_end":129462,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129463,"byte_end":129466,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Users sometimes ask whether it is safe to use a string of random characters","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129467,"byte_end":129546,"line_start":43,"line_end":43,"column_start":1,"column_end":80}},{"value":"/ as a password. In principle, all RNGs in Rand implementing `CryptoRng` are","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129547,"byte_end":129625,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ suitable as a source of randomness for generating passwords (if they are","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129626,"byte_end":129702,"line_start":45,"line_end":45,"column_start":1,"column_end":77}},{"value":"/ properly seeded), but it is more conservative to only use randomness","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129703,"byte_end":129775,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ directly from the operating system via the `getrandom` crate, or the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129776,"byte_end":129848,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/ corresponding bindings of a crypto library.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129849,"byte_end":129896,"line_start":48,"line_end":48,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129897,"byte_end":129900,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ When generating passwords or keys, it is important to consider the threat","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129901,"byte_end":129978,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/ model and in some cases the memorability of the password. This is out of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":129979,"byte_end":130055,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"/ scope of the Rand project, and therefore we defer to the following","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":130056,"byte_end":130126,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/ references:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":130127,"byte_end":130142,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":130143,"byte_end":130146,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ - [Wikipedia article on Password Strength](https://en.wikipedia.org/wiki/Password_strength)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":130147,"byte_end":130242,"line_start":55,"line_end":55,"column_start":1,"column_end":96}},{"value":"/ - [Diceware for generating memorable passwords](https://en.wikipedia.org/wiki/Diceware)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":130243,"byte_end":130334,"line_start":56,"line_end":56,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":276},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/utils.rs","byte_start":138732,"byte_end":138738,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":285},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/utils.rs","byte_start":145732,"byte_end":145736,"line_start":220,"line_end":220,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":290},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/utils.rs","byte_start":146251,"byte_end":146255,"line_start":232,"line_end":232,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":310},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12951,"byte_end":12963,"line_start":146,"line_end":146,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":314}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11930,"byte_end":12008,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12009,"byte_end":12012,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12013,"byte_end":12078,"line_start":130,"line_end":130,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12079,"byte_end":12150,"line_start":131,"line_end":131,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12151,"byte_end":12230,"line_start":132,"line_end":132,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12231,"byte_end":12291,"line_start":133,"line_end":133,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12292,"byte_end":12295,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12296,"byte_end":12374,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12375,"byte_end":12443,"line_start":136,"line_end":136,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12444,"byte_end":12517,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12518,"byte_end":12521,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12522,"byte_end":12597,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12598,"byte_end":12656,"line_start":140,"line_end":140,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12657,"byte_end":12735,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12736,"byte_end":12814,"line_start":142,"line_end":142,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12815,"byte_end":12882,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12883,"byte_end":12886,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::method.sample_iter","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12887,"byte_end":12940,"line_start":145,"line_end":145,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13057,"byte_end":13063,"line_start":148,"line_end":148,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> T","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":12973,"byte_end":13049,"line_start":147,"line_end":147,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14357,"byte_end":14368,"line_start":184,"line_end":184,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"pub fn sample_iter<R>(Self, R) -> DistIter<Self, R, T> where R: Rng,\nSelf: Sized","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13112,"byte_end":13186,"line_start":150,"line_end":150,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13191,"byte_end":13220,"line_start":151,"line_end":151,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13225,"byte_end":13228,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13233,"byte_end":13300,"line_start":153,"line_end":153,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13305,"byte_end":13373,"line_start":154,"line_end":154,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13378,"byte_end":13451,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13456,"byte_end":13525,"line_start":156,"line_end":156,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13530,"byte_end":13597,"line_start":157,"line_end":157,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13602,"byte_end":13605,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13610,"byte_end":13623,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13628,"byte_end":13631,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13636,"byte_end":13643,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13648,"byte_end":13673,"line_start":162,"line_end":162,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13678,"byte_end":13755,"line_start":163,"line_end":163,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13760,"byte_end":13763,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13768,"byte_end":13799,"line_start":165,"line_end":165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13804,"byte_end":13807,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13812,"byte_end":13835,"line_start":167,"line_end":167,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(&mut rng).take(16).collect();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13840,"byte_end":13912,"line_start":168,"line_end":168,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13917,"byte_end":13920,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13925,"byte_end":13939,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13944,"byte_end":13976,"line_start":171,"line_end":171,"column_start":5,"column_end":37}},{"value":"/     .sample_iter(&mut rng)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":13981,"byte_end":14011,"line_start":172,"line_end":172,"column_start":5,"column_end":35}},{"value":"/     .take(7)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14016,"byte_end":14032,"line_start":173,"line_end":173,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14037,"byte_end":14061,"line_start":174,"line_end":174,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14066,"byte_end":14085,"line_start":175,"line_end":175,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14090,"byte_end":14093,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14098,"byte_end":14118,"line_start":177,"line_end":177,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14123,"byte_end":14172,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(&mut rng);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14177,"byte_end":14232,"line_start":179,"line_end":179,"column_start":5,"column_end":60}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14237,"byte_end":14278,"line_start":180,"line_end":180,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14283,"byte_end":14327,"line_start":181,"line_end":181,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14332,"byte_end":14337,"line_start":182,"line_end":182,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14342,"byte_end":14349,"line_start":183,"line_end":183,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1603},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":15066,"byte_end":15074,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14749,"byte_end":14823,"line_start":204,"line_end":204,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14824,"byte_end":14866,"line_start":205,"line_end":205,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14867,"byte_end":14870,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14871,"byte_end":14950,"line_start":207,"line_end":207,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14951,"byte_end":14986,"line_start":208,"line_end":208,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14987,"byte_end":14990,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":14991,"byte_end":15037,"line_start":210,"line_end":210,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1615},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":19259,"byte_end":19267,"line_start":332,"line_end":332,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":15958,"byte_end":16036,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16037,"byte_end":16117,"line_start":255,"line_end":255,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16118,"byte_end":16152,"line_start":256,"line_end":256,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16153,"byte_end":16156,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16157,"byte_end":16188,"line_start":258,"line_end":258,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16189,"byte_end":16192,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16193,"byte_end":16263,"line_start":260,"line_end":260,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16264,"byte_end":16328,"line_start":261,"line_end":261,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16329,"byte_end":16332,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16333,"byte_end":16409,"line_start":263,"line_end":263,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16410,"byte_end":16444,"line_start":264,"line_end":264,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16445,"byte_end":16521,"line_start":265,"line_end":265,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16522,"byte_end":16590,"line_start":266,"line_end":266,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16591,"byte_end":16657,"line_start":267,"line_end":267,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16658,"byte_end":16696,"line_start":268,"line_end":268,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16697,"byte_end":16766,"line_start":269,"line_end":269,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16767,"byte_end":16841,"line_start":270,"line_end":270,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16842,"byte_end":16890,"line_start":271,"line_end":271,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16891,"byte_end":16967,"line_start":272,"line_end":272,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16968,"byte_end":16998,"line_start":273,"line_end":273,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":16999,"byte_end":17002,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17003,"byte_end":17076,"line_start":275,"line_end":275,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17077,"byte_end":17136,"line_start":276,"line_end":276,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17137,"byte_end":17140,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17141,"byte_end":17216,"line_start":278,"line_end":278,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17217,"byte_end":17292,"line_start":279,"line_end":279,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17293,"byte_end":17373,"line_start":280,"line_end":280,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17374,"byte_end":17439,"line_start":281,"line_end":281,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17440,"byte_end":17519,"line_start":282,"line_end":282,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17520,"byte_end":17587,"line_start":283,"line_end":283,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17588,"byte_end":17591,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17592,"byte_end":17621,"line_start":285,"line_end":285,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17622,"byte_end":17625,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17626,"byte_end":17705,"line_start":287,"line_end":287,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17706,"byte_end":17709,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17710,"byte_end":17717,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17718,"byte_end":17744,"line_start":290,"line_end":290,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17745,"byte_end":17763,"line_start":291,"line_end":291,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17764,"byte_end":17818,"line_start":292,"line_end":292,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17819,"byte_end":17822,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17823,"byte_end":17841,"line_start":294,"line_end":294,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17842,"byte_end":17857,"line_start":295,"line_end":295,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17858,"byte_end":17863,"line_start":296,"line_end":296,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17864,"byte_end":17867,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17868,"byte_end":17911,"line_start":298,"line_end":298,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17912,"byte_end":17977,"line_start":299,"line_end":299,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":17978,"byte_end":18012,"line_start":300,"line_end":300,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18013,"byte_end":18022,"line_start":301,"line_end":301,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18023,"byte_end":18028,"line_start":302,"line_end":302,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18029,"byte_end":18036,"line_start":303,"line_end":303,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18037,"byte_end":18040,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18041,"byte_end":18061,"line_start":305,"line_end":305,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18062,"byte_end":18069,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18070,"byte_end":18095,"line_start":307,"line_end":307,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18096,"byte_end":18134,"line_start":308,"line_end":308,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18135,"byte_end":18138,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18139,"byte_end":18198,"line_start":310,"line_end":310,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18199,"byte_end":18240,"line_start":311,"line_end":311,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18241,"byte_end":18248,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18249,"byte_end":18252,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18253,"byte_end":18288,"line_start":314,"line_end":314,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18289,"byte_end":18369,"line_start":315,"line_end":315,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18370,"byte_end":18434,"line_start":316,"line_end":316,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18435,"byte_end":18438,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18439,"byte_end":18513,"line_start":318,"line_end":318,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18514,"byte_end":18591,"line_start":319,"line_end":319,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18592,"byte_end":18665,"line_start":320,"line_end":320,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18666,"byte_end":18736,"line_start":321,"line_end":321,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18737,"byte_end":18740,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18741,"byte_end":18817,"line_start":323,"line_end":323,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0..1)` which also samples from","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18818,"byte_end":18894,"line_start":324,"line_end":324,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` uses transmute-based methods which yield 1 bit","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18895,"byte_end":18974,"line_start":325,"line_end":325,"column_start":1,"column_end":80}},{"value":"/ less precision but may perform faster on some architectures (on modern Intel","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":18975,"byte_end":19055,"line_start":326,"line_end":326,"column_start":1,"column_end":81}},{"value":"/ CPUs all methods have approximately equal performance).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":19056,"byte_end":19115,"line_start":327,"line_end":327,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":19116,"byte_end":19119,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":19120,"byte_end":19153,"line_start":329,"line_end":329,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":333},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"/ Convenience re-export of common members","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152193,"byte_end":152236,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152237,"byte_end":152240,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152241,"byte_end":152317,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152318,"byte_end":152397,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ be imported manually:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152398,"byte_end":152423,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152424,"byte_end":152427,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152428,"byte_end":152435,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152436,"byte_end":152461,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/ # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152462,"byte_end":152520,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/ # let _: f32 = r.gen();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152521,"byte_end":152548,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/prelude.rs","byte_start":152549,"byte_end":152556,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":363},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155282,"byte_end":155285,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"Rng","qualname":"::rng::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":381}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":153755,"byte_end":153839,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":153840,"byte_end":153910,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":153911,"byte_end":153914,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":153915,"byte_end":153982,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":153983,"byte_end":153986,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":153987,"byte_end":154006,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154007,"byte_end":154010,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154011,"byte_end":154080,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154081,"byte_end":154114,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154115,"byte_end":154118,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154119,"byte_end":154195,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154196,"byte_end":154253,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154254,"byte_end":154328,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154329,"byte_end":154405,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154406,"byte_end":154462,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154463,"byte_end":154466,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154467,"byte_end":154546,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154547,"byte_end":154626,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154627,"byte_end":154706,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154707,"byte_end":154785,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154786,"byte_end":154862,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154863,"byte_end":154937,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":154938,"byte_end":155014,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155015,"byte_end":155067,"line_start":41,"line_end":41,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155068,"byte_end":155071,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155072,"byte_end":155084,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155085,"byte_end":155088,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155089,"byte_end":155096,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155097,"byte_end":155124,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155125,"byte_end":155143,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155144,"byte_end":155147,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155148,"byte_end":155197,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155198,"byte_end":155215,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155216,"byte_end":155221,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155222,"byte_end":155225,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155226,"byte_end":155263,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155264,"byte_end":155271,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156435,"byte_end":156438,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"gen","qualname":"::rng::Rng::gen","value":"pub fn gen<T>(&mut Self) -> T where Standard: Distribution<T>","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155301,"byte_end":155368,"line_start":56,"line_end":56,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155373,"byte_end":155376,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155381,"byte_end":155394,"line_start":58,"line_end":58,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155399,"byte_end":155402,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155407,"byte_end":155414,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155419,"byte_end":155451,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155456,"byte_end":155459,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155464,"byte_end":155495,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155500,"byte_end":155527,"line_start":64,"line_end":64,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155532,"byte_end":155554,"line_start":65,"line_end":65,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155559,"byte_end":155606,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155611,"byte_end":155618,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155623,"byte_end":155626,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155631,"byte_end":155654,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155659,"byte_end":155662,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155667,"byte_end":155740,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155745,"byte_end":155816,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155821,"byte_end":155835,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155840,"byte_end":155843,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155848,"byte_end":155921,"line_start":75,"line_end":75,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155926,"byte_end":155996,"line_start":76,"line_end":76,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156001,"byte_end":156004,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156009,"byte_end":156016,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156021,"byte_end":156053,"line_start":79,"line_end":79,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156058,"byte_end":156061,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156066,"byte_end":156097,"line_start":81,"line_end":81,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156102,"byte_end":156172,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156177,"byte_end":156180,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156185,"byte_end":156250,"line_start":84,"line_end":84,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156255,"byte_end":156285,"line_start":85,"line_end":85,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156290,"byte_end":156347,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156352,"byte_end":156359,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156364,"byte_end":156367,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156372,"byte_end":156413,"line_start":89,"line_end":89,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156418,"byte_end":156427,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157473,"byte_end":157482,"line_start":127,"line_end":127,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::rng::Rng::gen_range","value":"pub fn gen_range<T, R>(&mut Self, R) -> T where T: SampleUniform,\nR: SampleRange<T>","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Generate a random value in the given range.","sig":null,"attributes":[{"value":"/ Generate a random value in the given range.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156537,"byte_end":156584,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156589,"byte_end":156592,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156597,"byte_end":156669,"line_start":98,"line_end":98,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156674,"byte_end":156742,"line_start":99,"line_end":99,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156747,"byte_end":156819,"line_start":100,"line_end":100,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156824,"byte_end":156827,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Only `gen_range(low..high)` and `gen_range(low..=high)` are supported.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156832,"byte_end":156906,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156911,"byte_end":156914,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156919,"byte_end":156931,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156936,"byte_end":156939,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Panics if the range is empty.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156944,"byte_end":156977,"line_start":106,"line_end":106,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156982,"byte_end":156985,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":156990,"byte_end":157003,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157008,"byte_end":157011,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157016,"byte_end":157023,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157028,"byte_end":157060,"line_start":111,"line_end":111,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157065,"byte_end":157068,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157073,"byte_end":157104,"line_start":113,"line_end":113,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157109,"byte_end":157112,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ // Exclusive range","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157117,"byte_end":157139,"line_start":115,"line_end":115,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..10);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157144,"byte_end":157182,"line_start":116,"line_end":116,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157187,"byte_end":157209,"line_start":117,"line_end":117,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0..1.3e5);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157214,"byte_end":157259,"line_start":118,"line_end":118,"column_start":5,"column_end":50}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157264,"byte_end":157286,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157291,"byte_end":157294,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ // Inclusive range","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157299,"byte_end":157321,"line_start":121,"line_end":121,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..=10);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157326,"byte_end":157365,"line_start":122,"line_end":122,"column_start":5,"column_end":44}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157370,"byte_end":157392,"line_start":123,"line_end":123,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157397,"byte_end":157404,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157409,"byte_end":157412,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157417,"byte_end":157465,"line_start":126,"line_end":126,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158169,"byte_end":158175,"line_start":150,"line_end":150,"column_start":8,"column_end":14},"name":"sample","qualname":"::rng::Rng::sample","value":"pub fn sample<T, D: Distribution<T>>(&mut Self, D) -> T","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157693,"byte_end":157746,"line_start":136,"line_end":136,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157751,"byte_end":157754,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157759,"byte_end":157774,"line_start":138,"line_end":138,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157779,"byte_end":157782,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157787,"byte_end":157794,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157799,"byte_end":157831,"line_start":141,"line_end":141,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157836,"byte_end":157873,"line_start":142,"line_end":142,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157878,"byte_end":157881,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157886,"byte_end":157917,"line_start":144,"line_end":144,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157922,"byte_end":157970,"line_start":145,"line_end":145,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":157975,"byte_end":158048,"line_start":146,"line_end":146,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158053,"byte_end":158089,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158094,"byte_end":158149,"line_start":148,"line_end":148,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158154,"byte_end":158161,"line_start":149,"line_end":149,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159576,"byte_end":159587,"line_start":190,"line_end":190,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::rng::Rng::sample_iter","value":"pub fn sample_iter<T, D>(Self, D) -> distributions::DistIter<D, Self, T> where\nD: Distribution<T>, Self: Sized","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158265,"byte_end":158339,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158344,"byte_end":158347,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158352,"byte_end":158426,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158431,"byte_end":158467,"line_start":157,"line_end":157,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158472,"byte_end":158519,"line_start":158,"line_end":158,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158524,"byte_end":158595,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158600,"byte_end":158659,"line_start":160,"line_end":160,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158664,"byte_end":158667,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158672,"byte_end":158685,"line_start":162,"line_end":162,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158690,"byte_end":158693,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158698,"byte_end":158705,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158710,"byte_end":158742,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158747,"byte_end":158810,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158815,"byte_end":158818,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158823,"byte_end":158854,"line_start":168,"line_end":168,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158859,"byte_end":158862,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158867,"byte_end":158890,"line_start":170,"line_end":170,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = (&mut rng).sample_iter(Standard).take(16).collect();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158895,"byte_end":158969,"line_start":171,"line_end":171,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158974,"byte_end":158977,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":158982,"byte_end":158996,"line_start":173,"line_end":173,"column_start":5,"column_end":19}},{"value":"/ let s: String = (&mut rng).sample_iter(Alphanumeric)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159001,"byte_end":159057,"line_start":174,"line_end":174,"column_start":5,"column_end":61}},{"value":"/     .take(7)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159062,"byte_end":159078,"line_start":175,"line_end":175,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159083,"byte_end":159107,"line_start":176,"line_end":176,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159112,"byte_end":159131,"line_start":177,"line_end":177,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159136,"byte_end":159139,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159144,"byte_end":159166,"line_start":179,"line_end":179,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", (&mut rng).sample_iter(Standard).take(5)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159171,"byte_end":159232,"line_start":180,"line_end":180,"column_start":5,"column_end":66}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159237,"byte_end":159302,"line_start":181,"line_end":181,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159307,"byte_end":159310,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159315,"byte_end":159335,"line_start":183,"line_end":183,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159340,"byte_end":159389,"line_start":184,"line_end":184,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = (&mut rng).sample_iter(die_range);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159394,"byte_end":159451,"line_start":185,"line_end":185,"column_start":5,"column_end":62}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159456,"byte_end":159497,"line_start":186,"line_end":186,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159502,"byte_end":159546,"line_start":187,"line_end":187,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159551,"byte_end":159556,"line_start":188,"line_end":188,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159561,"byte_end":159568,"line_start":189,"line_end":189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160321,"byte_end":160325,"line_start":216,"line_end":216,"column_start":8,"column_end":12},"name":"fill","qualname":"::rng::Rng::fill","value":"pub fn fill<T: Fill + ?Sized>(&mut Self, &mut T)","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159757,"byte_end":159813,"line_start":198,"line_end":198,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159818,"byte_end":159821,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159826,"byte_end":159899,"line_start":200,"line_end":200,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159904,"byte_end":159966,"line_start":201,"line_end":201,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159971,"byte_end":159974,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`try_fill`] except that it panics on error.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":159979,"byte_end":160048,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160053,"byte_end":160056,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160061,"byte_end":160074,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160079,"byte_end":160082,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160087,"byte_end":160094,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160099,"byte_end":160131,"line_start":208,"line_end":208,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160136,"byte_end":160139,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160144,"byte_end":160172,"line_start":210,"line_end":210,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160177,"byte_end":160213,"line_start":211,"line_end":211,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160218,"byte_end":160225,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160230,"byte_end":160233,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160238,"byte_end":160277,"line_start":214,"line_end":214,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160282,"byte_end":160313,"line_start":215,"line_end":215,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161165,"byte_end":161173,"line_start":244,"line_end":244,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Rng::try_fill","value":"pub fn try_fill<T: Fill + ?Sized>(&mut Self, &mut T) -> Result<(), Error>","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160457,"byte_end":160513,"line_start":220,"line_end":220,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160518,"byte_end":160521,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160526,"byte_end":160599,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160604,"byte_end":160666,"line_start":223,"line_end":223,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160671,"byte_end":160674,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it forwards errors.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160679,"byte_end":160744,"line_start":225,"line_end":225,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160749,"byte_end":160752,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160757,"byte_end":160770,"line_start":227,"line_end":227,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160775,"byte_end":160778,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160783,"byte_end":160790,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160795,"byte_end":160817,"line_start":230,"line_end":230,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160822,"byte_end":160854,"line_start":231,"line_end":231,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160859,"byte_end":160862,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160867,"byte_end":160910,"line_start":233,"line_end":233,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160915,"byte_end":160943,"line_start":234,"line_end":234,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160948,"byte_end":160989,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":160994,"byte_end":161006,"line_start":236,"line_end":236,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161011,"byte_end":161018,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161023,"byte_end":161026,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161031,"byte_end":161057,"line_start":239,"line_end":239,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161062,"byte_end":161069,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161074,"byte_end":161077,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161082,"byte_end":161129,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161134,"byte_end":161157,"line_start":243,"line_end":243,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161799,"byte_end":161807,"line_start":268,"line_end":268,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::rng::Rng::gen_bool","value":"pub fn gen_bool(&mut Self, f64) -> bool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161279,"byte_end":161334,"line_start":248,"line_end":248,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161339,"byte_end":161342,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161347,"byte_end":161414,"line_start":250,"line_end":250,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161419,"byte_end":161469,"line_start":251,"line_end":251,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161474,"byte_end":161477,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161482,"byte_end":161495,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161500,"byte_end":161503,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161508,"byte_end":161515,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161520,"byte_end":161552,"line_start":256,"line_end":256,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161557,"byte_end":161560,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161565,"byte_end":161596,"line_start":258,"line_end":258,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161601,"byte_end":161645,"line_start":259,"line_end":259,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161650,"byte_end":161657,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161662,"byte_end":161665,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161670,"byte_end":161682,"line_start":262,"line_end":262,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161687,"byte_end":161690,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161695,"byte_end":161721,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161726,"byte_end":161729,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161734,"byte_end":161777,"line_start":266,"line_end":266,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161782,"byte_end":161791,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162783,"byte_end":162792,"line_start":297,"line_end":297,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::rng::Rng::gen_ratio","value":"pub fn gen_ratio(&mut Self, u32, u32) -> bool","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":161930,"byte_end":162002,"line_start":273,"line_end":273,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162007,"byte_end":162078,"line_start":274,"line_end":274,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162083,"byte_end":162157,"line_start":275,"line_end":275,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162162,"byte_end":162232,"line_start":276,"line_end":276,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162237,"byte_end":162275,"line_start":277,"line_end":277,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162280,"byte_end":162283,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162288,"byte_end":162355,"line_start":279,"line_end":279,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162360,"byte_end":162428,"line_start":280,"line_end":280,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162433,"byte_end":162436,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162441,"byte_end":162453,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162458,"byte_end":162461,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162466,"byte_end":162521,"line_start":284,"line_end":284,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162526,"byte_end":162529,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162534,"byte_end":162547,"line_start":286,"line_end":286,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162552,"byte_end":162555,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162560,"byte_end":162567,"line_start":288,"line_end":288,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162572,"byte_end":162604,"line_start":289,"line_end":289,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162609,"byte_end":162612,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162617,"byte_end":162648,"line_start":291,"line_end":291,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162653,"byte_end":162693,"line_start":292,"line_end":292,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162698,"byte_end":162705,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162710,"byte_end":162713,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162718,"byte_end":162761,"line_start":295,"line_end":295,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":162766,"byte_end":162775,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":384},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163341,"byte_end":163345,"line_start":312,"line_end":312,"column_start":11,"column_end":15},"name":"Fill","qualname":"::rng::Fill","value":"Fill","parent":null,"children":[{"krate":0,"index":385}],"decl_id":null,"docs":" Types which may be filled with random data","sig":null,"attributes":[{"value":"/ Types which may be filled with random data","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163007,"byte_end":163053,"line_start":305,"line_end":305,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163054,"byte_end":163057,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ This trait allows arrays to be efficiently filled with random data.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163058,"byte_end":163129,"line_start":307,"line_end":307,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163130,"byte_end":163133,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ Implementations are expected to be portable across machines unless","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163134,"byte_end":163204,"line_start":309,"line_end":309,"column_start":1,"column_end":71}},{"value":"/ clearly documented otherwise (see the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163205,"byte_end":163246,"line_start":310,"line_end":310,"column_start":1,"column_end":42}},{"value":"/ [Chapter on Portability](https://rust-random.github.io/book/portability.html)).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163247,"byte_end":163330,"line_start":311,"line_end":311,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163390,"byte_end":163398,"line_start":314,"line_end":314,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Fill::try_fill","value":"pub fn try_fill<R: Rng + ?Sized>(&mut Self, &mut R) -> Result<(), Error>","parent":{"krate":0,"index":384},"children":[],"decl_id":null,"docs":" Fill self with random data\n","sig":null,"attributes":[{"value":"/ Fill self with random data","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163352,"byte_end":163382,"line_start":313,"line_end":313,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":393},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":483},{"krate":0,"index":495},{"krate":0,"index":514},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":2270}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"/ Random number generators and adapters","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":171860,"byte_end":171901,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":171902,"byte_end":171905,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Background: Random number generators (RNGs)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":171906,"byte_end":171956,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":171957,"byte_end":171960,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":171961,"byte_end":172030,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ random number generators as follows:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172031,"byte_end":172071,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172072,"byte_end":172075,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172076,"byte_end":172156,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172157,"byte_end":172235,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172236,"byte_end":172309,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172310,"byte_end":172390,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172391,"byte_end":172470,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/     a hardware generator (HRNG).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172471,"byte_end":172507,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"/ -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172508,"byte_end":172587,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172588,"byte_end":172666,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172667,"byte_end":172747,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172748,"byte_end":172824,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172825,"byte_end":172905,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172906,"byte_end":172986,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":172987,"byte_end":173061,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173062,"byte_end":173138,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173139,"byte_end":173215,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173216,"byte_end":173294,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173295,"byte_end":173298,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Traits and functionality","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173299,"byte_end":173330,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173331,"byte_end":173334,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173335,"byte_end":173410,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173411,"byte_end":173484,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ additionally implement the [`CryptoRng`] trait.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173485,"byte_end":173536,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173537,"byte_end":173540,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173541,"byte_end":173614,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173615,"byte_end":173683,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173684,"byte_end":173687,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173688,"byte_end":173743,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"/ -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173744,"byte_end":173808,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/ -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173809,"byte_end":173885,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173886,"byte_end":173949,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173950,"byte_end":173953,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":173954,"byte_end":174018,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174019,"byte_end":174022,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Our generators","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174023,"byte_end":174044,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174045,"byte_end":174048,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ This crate provides several random number generators:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174049,"byte_end":174106,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174107,"byte_end":174110,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174111,"byte_end":174184,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174185,"byte_end":174258,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174259,"byte_end":174323,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/ -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174324,"byte_end":174404,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174405,"byte_end":174483,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174484,"byte_end":174558,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"/     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174559,"byte_end":174616,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"/ -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174617,"byte_end":174697,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/     (based on reviews, maturity and usage). The current algorithm is ChaCha12,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174698,"byte_end":174780,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"/     which is well established and rigorously analysed.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174781,"byte_end":174839,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"/     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174840,"byte_end":174915,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/     periodic reseeding.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174916,"byte_end":174943,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":174944,"byte_end":175025,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/     little memory, and have good output quality.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175026,"byte_end":175078,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175079,"byte_end":175082,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175083,"byte_end":175160,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ release and may be platform-dependent, therefore they should be considered","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175161,"byte_end":175239,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ **not reproducible**.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175240,"byte_end":175265,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175266,"byte_end":175269,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ## Additional generators","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175270,"byte_end":175298,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175299,"byte_end":175302,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175303,"byte_end":175378,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175379,"byte_end":175442,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"/ The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175443,"byte_end":175512,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"/ entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175513,"byte_end":175583,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/ [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175584,"byte_end":175654,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175655,"byte_end":175658,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175659,"byte_end":175737,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175738,"byte_end":175811,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/ [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175812,"byte_end":175890,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ be used directly when **reproducibility** matters.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175891,"byte_end":175945,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"/ Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":175946,"byte_end":176020,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176021,"byte_end":176095,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176096,"byte_end":176099,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ [`Rng`]: crate::Rng","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176100,"byte_end":176123,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176124,"byte_end":176155,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"/ [`CryptoRng`]: crate::CryptoRng","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176156,"byte_end":176191,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/ [`SeedableRng`]: crate::SeedableRng","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176192,"byte_end":176231,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"/ [`thread_rng`]: crate::thread_rng","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176232,"byte_end":176269,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176270,"byte_end":176317,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/ [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176318,"byte_end":176375,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"/ [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176376,"byte_end":176433,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"/ [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176434,"byte_end":176485,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176486,"byte_end":176545,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/ [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176546,"byte_end":176593,"line_start":97,"line_end":97,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":394},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/mod.rs","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":417},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176643,"byte_end":176666,"line_start":100,"line_end":100,"column_start":1,"column_end":24}},{"value":"/ Wrappers / adapters forming RNGs","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/mod.rs","byte_start":177822,"byte_end":177858,"line_start":9,"line_end":9,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1900},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179451,"byte_end":179458,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":1902}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[{"value":"/ An RNG that reads random bytes straight from any type supporting","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178501,"byte_end":178569,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`std::io::Read`], for example files.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178570,"byte_end":178611,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178612,"byte_end":178615,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This will work best with an infinite reader, but that is not required.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178616,"byte_end":178690,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178691,"byte_end":178694,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This can be used with `/dev/urandom` on Unix but it is recommended to use","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178695,"byte_end":178772,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ [`OsRng`] instead.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178773,"byte_end":178795,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178796,"byte_end":178799,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178800,"byte_end":178812,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178813,"byte_end":178816,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `ReadRng` uses [`std::io::Read::read_exact`], which retries on interrupts.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178817,"byte_end":178895,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ All other errors from the underlying reader, including when it does not","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178896,"byte_end":178971,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ have enough data, will only be reported through [`try_fill_bytes`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":178972,"byte_end":179043,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ The other [`RngCore`] methods will panic in case of an error.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179044,"byte_end":179109,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179110,"byte_end":179113,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179114,"byte_end":179127,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179128,"byte_end":179131,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179132,"byte_end":179139,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179140,"byte_end":179158,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::adapter::ReadRng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179159,"byte_end":179196,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179197,"byte_end":179200,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let data = vec![1, 2, 3, 4, 5, 6, 7, 8];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179201,"byte_end":179245,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ let mut rng = ReadRng::new(&data[..]);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179246,"byte_end":179288,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/ println!(\"{:x}\", rng.gen::<u32>());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179289,"byte_end":179328,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179329,"byte_end":179336,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179337,"byte_end":179340,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`OsRng`]: crate::rngs::OsRng","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179341,"byte_end":179374,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179375,"byte_end":179422,"line_start":45,"line_end":45,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179566,"byte_end":179569,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"pub fn new(R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[{"value":"/ Create a new `ReadRng` from a `Read`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179513,"byte_end":179554,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1906},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":180478,"byte_end":180487,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[{"value":"/ `ReadRng` error type","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":180425,"byte_end":180449,"line_start":87,"line_end":87,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1911},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185437,"byte_end":185449,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[{"value":"/ A wrapper around any PRNG that implements [`BlockRngCore`], that adds the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":182836,"byte_end":182913,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ ability to reseed it.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":182914,"byte_end":182939,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":182940,"byte_end":182943,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `ReseedingRng` reseeds the underlying PRNG in the following cases:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":182944,"byte_end":183014,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183015,"byte_end":183018,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - On a manual call to [`reseed()`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183019,"byte_end":183058,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - After `clone()`, the clone will be reseeded on first use.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183059,"byte_end":183122,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ - After a process is forked, the RNG in the child process is reseeded within","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183123,"byte_end":183203,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   the next few generated values, depending on the block size of the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183204,"byte_end":183275,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/   underlying PRNG. For ChaCha and Hc128 this is a maximum of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183276,"byte_end":183340,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/   15 `u32` values before reseeding.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183341,"byte_end":183380,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ - After the PRNG has generated a configurable number of random bytes.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183381,"byte_end":183454,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183455,"byte_end":183458,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # When should reseeding after a fixed number of generated bytes be used?","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183459,"byte_end":183535,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183536,"byte_end":183539,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Reseeding after a fixed number of generated bytes is never strictly","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183540,"byte_end":183611,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ *necessary*. Cryptographic PRNGs don't have a limited number of bytes they","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183612,"byte_end":183690,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ can output, or at least not a limit reachable in any practical way. There is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183691,"byte_end":183771,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ no such thing as 'running out of entropy'.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183772,"byte_end":183818,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183819,"byte_end":183822,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Occasionally reseeding can be seen as some form of 'security in depth'. Even","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183823,"byte_end":183903,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ if in the future a cryptographic weakness is found in the CSPRNG being used,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183904,"byte_end":183984,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ or a flaw in the implementation, occasionally reseeding should make","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":183985,"byte_end":184056,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ exploiting it much more difficult or even impossible.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184057,"byte_end":184114,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184115,"byte_end":184118,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184119,"byte_end":184195,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ after a fixed number of generated bytes.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184196,"byte_end":184240,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184241,"byte_end":184244,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184245,"byte_end":184265,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184266,"byte_end":184269,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184270,"byte_end":184349,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ never panic but try to handle the error intelligently through some","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184350,"byte_end":184420,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ combination of retrying and delaying reseeding until later.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184421,"byte_end":184484,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ If handling the source error fails `ReseedingRng` will continue generating","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184485,"byte_end":184563,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ data from the wrapped PRNG without reseeding.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184564,"byte_end":184613,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184614,"byte_end":184617,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Manually calling [`reseed()`] will not have this retry or delay logic, but","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184618,"byte_end":184696,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ reports the error.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184697,"byte_end":184719,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184720,"byte_end":184723,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184724,"byte_end":184737,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184738,"byte_end":184741,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184742,"byte_end":184749,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184750,"byte_end":184775,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ use rand_chacha::ChaCha20Core; // Internal part of ChaChaRng that","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184776,"byte_end":184845,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/                              // implements BlockRngCore","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184846,"byte_end":184905,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184906,"byte_end":184932,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::adapter::ReseedingRng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184933,"byte_end":184975,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184976,"byte_end":184979,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let prng = ChaCha20Core::from_entropy();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":184980,"byte_end":185024,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let mut reseeding_rng = ReseedingRng::new(prng, 0, OsRng);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185025,"byte_end":185087,"line_start":67,"line_end":67,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185088,"byte_end":185091,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", reseeding_rng.gen::<u64>());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185092,"byte_end":185139,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185140,"byte_end":185143,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let mut cloned_rng = reseeding_rng.clone();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185144,"byte_end":185191,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/ assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185192,"byte_end":185259,"line_start":72,"line_end":72,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185260,"byte_end":185267,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185268,"byte_end":185271,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: rand_core::block::BlockRngCore","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185272,"byte_end":185324,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/ [`ReseedingRng::new`]: ReseedingRng::new","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185325,"byte_end":185369,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/ [`reseed()`]: ReseedingRng::reseed","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185370,"byte_end":185408,"line_start":77,"line_end":77,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185953,"byte_end":185956,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"pub fn new(R, u64, Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` from an existing PRNG, combined with a RNG","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185656,"byte_end":185730,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ to use as reseeder.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185735,"byte_end":185758,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185763,"byte_end":185766,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ `threshold` sets the number of generated bytes after which to reseed the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185771,"byte_end":185847,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ PRNG. Set it to zero to never reseed based on the number of generated","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185852,"byte_end":185925,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/ values.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185930,"byte_end":185941,"line_start":94,"line_end":94,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":186141,"byte_end":186147,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"pub fn reseed(&mut Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[{"value":"/ Reseed the internal PRNG.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":186100,"byte_end":186129,"line_start":99,"line_end":99,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":483},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":1932},{"krate":0,"index":1944},{"krate":0,"index":1942},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":488},{"krate":0,"index":490}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"/ Mock random number generator","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":194694,"byte_end":194726,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1932},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195396,"byte_end":195403,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":1933},{"krate":0,"index":1934}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":194834,"byte_end":194896,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":194897,"byte_end":194900,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":194901,"byte_end":194975,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":194976,"byte_end":195049,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195050,"byte_end":195086,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195087,"byte_end":195090,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195091,"byte_end":195098,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195099,"byte_end":195117,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195118,"byte_end":195152,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195153,"byte_end":195156,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195157,"byte_end":195197,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195198,"byte_end":195238,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195239,"byte_end":195273,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195274,"byte_end":195281,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195593,"byte_end":195596,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"pub fn new(u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195452,"byte_end":195521,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195526,"byte_end":195581,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1946},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198380,"byte_end":198386,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197450,"byte_end":197528,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197529,"byte_end":197602,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197603,"byte_end":197649,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197650,"byte_end":197653,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used is the ChaCha block cipher with 12 rounds. Please","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197654,"byte_end":197734,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ see this relevant [rand issue] for the discussion. This may change as new ","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197735,"byte_end":197813,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ evidence of cipher security and performance becomes available.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197814,"byte_end":197880,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197881,"byte_end":197884,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197885,"byte_end":197961,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ due to dependence on configuration and possible replacement in future","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":197962,"byte_end":198035,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ library versions. For a secure reproducible generator, we recommend use of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198036,"byte_end":198114,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ the [rand_chacha] crate directly.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198115,"byte_end":198152,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198153,"byte_end":198156,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198157,"byte_end":198212,"line_start":34,"line_end":34,"column_start":1,"column_end":56}},{"value":"/ [rand issue]: https://github.com/rust-random/rand/issues/932","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198213,"byte_end":198277,"line_start":35,"line_end":35,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1960},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202648,"byte_end":202657,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":1961}],"decl_id":null,"docs":" A reference to the thread-local generator","sig":null,"attributes":[{"value":"/ A reference to the thread-local generator","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201565,"byte_end":201610,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201611,"byte_end":201614,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ An instance can be obtained via [`thread_rng`] or via `ThreadRng::default()`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201615,"byte_end":201696,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ This handle is safe to use everywhere (including thread-local destructors)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201697,"byte_end":201775,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ but cannot be passed between threads (is not `Send` or `Sync`).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201776,"byte_end":201843,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201844,"byte_end":201847,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ `ThreadRng` uses the same PRNG as [`StdRng`] for security and performance","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201848,"byte_end":201925,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ and is automatically seeded from [`OsRng`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201926,"byte_end":201973,"line_start":47,"line_end":47,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201974,"byte_end":201977,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Unlike `StdRng`, `ThreadRng` uses the  [`ReseedingRng`] wrapper to reseed","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":201978,"byte_end":202055,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ the PRNG from fresh entropy every 64 kiB of random data as well as after a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202056,"byte_end":202134,"line_start":50,"line_end":50,"column_start":1,"column_end":79}},{"value":"/ fork on Unix (though not quite immediately; see documentation of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202135,"byte_end":202203,"line_start":51,"line_end":51,"column_start":1,"column_end":69}},{"value":"/ [`ReseedingRng`]).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202204,"byte_end":202226,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/ Note that the reseeding is done as an extra precaution against side-channel","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202227,"byte_end":202306,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ attacks and mis-use (e.g. if somehow weak entropy were supplied initially).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202307,"byte_end":202386,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ The PRNG algorithms used are assumed to be secure.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202387,"byte_end":202441,"line_start":55,"line_end":55,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202442,"byte_end":202445,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`ReseedingRng`]: crate::rngs::adapter::ReseedingRng","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202446,"byte_end":202502,"line_start":57,"line_end":57,"column_start":1,"column_end":57}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":202503,"byte_end":202538,"line_start":58,"line_end":58,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203743,"byte_end":203753,"line_start":87,"line_end":87,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"pub fn thread_rng() -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[{"value":"/ Retrieve the lazily-initialized thread-local random number generator,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203292,"byte_end":203365,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ seeded by the system. Intended to be used in method chaining style,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203366,"byte_end":203437,"line_start":80,"line_end":80,"column_start":1,"column_end":72}},{"value":"/ e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203438,"byte_end":203499,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"/ `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203500,"byte_end":203574,"line_start":82,"line_end":82,"column_start":1,"column_end":75}},{"value":"/ `ThreadRng::default()` equivalent.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203575,"byte_end":203613,"line_start":83,"line_end":83,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203614,"byte_end":203617,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ For more information see [`ThreadRng`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203618,"byte_end":203661,"line_start":85,"line_end":85,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":540},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":677},{"krate":0,"index":687},{"krate":0,"index":723},{"krate":0,"index":2004},{"krate":0,"index":2011},{"krate":0,"index":725},{"krate":0,"index":733},{"krate":0,"index":738}],"decl_id":null,"docs":" Sequence-related functionality","sig":null,"attributes":[{"value":"/ Sequence-related functionality","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205638,"byte_end":205672,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205673,"byte_end":205676,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module provides:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205677,"byte_end":205702,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205703,"byte_end":205706,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ *   [`SliceRandom`] slice sampling and mutation","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205707,"byte_end":205758,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ *   [`IteratorRandom`] iterator sampling","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205759,"byte_end":205803,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ *   [`index::sample`] low-level API to choose multiple indices from","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205804,"byte_end":205875,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/     `0..length`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205876,"byte_end":205895,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205896,"byte_end":205899,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Also see:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205900,"byte_end":205913,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205914,"byte_end":205917,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ *   [`crate::distributions::WeightedIndex`] distribution which provides","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205918,"byte_end":205993,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/     weighted index sampling.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":205994,"byte_end":206026,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206027,"byte_end":206030,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206031,"byte_end":206108,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206109,"byte_end":206184,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ small performance boost in some cases).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206185,"byte_end":206228,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":541},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":1971},{"krate":0,"index":1980},{"krate":0,"index":1978},{"krate":0,"index":553},{"krate":0,"index":560},{"krate":0,"index":564},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":1982},{"krate":0,"index":1990},{"krate":0,"index":573},{"krate":0,"index":580},{"krate":0,"index":1993},{"krate":0,"index":2002},{"krate":0,"index":2000},{"krate":0,"index":582},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":597},{"krate":0,"index":601},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":631},{"krate":0,"index":635},{"krate":0,"index":639}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206231,"byte_end":206256,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/ Low-level API for sampling indices","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":251842,"byte_end":251880,"line_start":9,"line_end":9,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1972},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252596,"byte_end":252599,"line_start":33,"line_end":33,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":1971},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1975},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252634,"byte_end":252639,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":1971},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1971},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252562,"byte_end":252570,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"pub enum IndexVec {\n\n    #[doc(hidden)]\n    U32(Vec<u32>),\n\n    #[doc(hidden)]\n    USize(Vec<usize>),\n}","parent":null,"children":[{"krate":0,"index":1972},{"krate":0,"index":1975}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[{"value":"/ A vector of indices.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252384,"byte_end":252408,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252409,"byte_end":252412,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Multiple internal representations are possible.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252413,"byte_end":252464,"line_start":28,"line_end":28,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252735,"byte_end":252738,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[{"value":"/ Returns the number of indices","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252676,"byte_end":252709,"line_start":39,"line_end":39,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252714,"byte_end":252723,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252956,"byte_end":252964,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexVec>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the length is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the length is 0.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252892,"byte_end":252930,"line_start":48,"line_end":48,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252935,"byte_end":252944,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253301,"byte_end":253306,"line_start":62,"line_end":62,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"pub fn index(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[{"value":"/ Return the value at the given `index`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253127,"byte_end":253169,"line_start":57,"line_end":57,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253174,"byte_end":253177,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ (Note: we cannot implement [`std::ops::Index`] because of lifetime","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253182,"byte_end":253252,"line_start":59,"line_end":59,"column_start":5,"column_end":75}},{"value":"/ restrictions.)","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253257,"byte_end":253275,"line_start":60,"line_end":60,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253280,"byte_end":253289,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253585,"byte_end":253593,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"pub fn into_vec(Self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[{"value":"/ Return result as a `Vec<usize>`. Conversion may or may not be trivial.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253485,"byte_end":253559,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253564,"byte_end":253573,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253858,"byte_end":253862,"line_start":80,"line_end":80,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"pub fn iter(&Self) -> IndexVecIter","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Iterate over the indices as a sequence of `usize` values","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253772,"byte_end":253832,"line_start":78,"line_end":78,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":253837,"byte_end":253846,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1984},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255427,"byte_end":255430,"line_start":136,"line_end":136,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter)","parent":{"krate":0,"index":1982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1987},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255477,"byte_end":255482,"line_start":138,"line_end":138,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter)","parent":{"krate":0,"index":1982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1982},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255385,"byte_end":255397,"line_start":134,"line_end":134,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"pub enum IndexVecIter<'a> {\n\n    #[doc(hidden)]\n    U32(slice::Iter),\n\n    #[doc(hidden)]\n    USize(slice::Iter),\n}","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1987}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::iter`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255322,"byte_end":255358,"line_start":132,"line_end":132,"column_start":1,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1994},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256218,"byte_end":256221,"line_start":168,"line_end":168,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":1993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1997},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256266,"byte_end":256271,"line_start":170,"line_end":170,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":1993},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1993},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256176,"byte_end":256192,"line_start":166,"line_end":166,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"pub enum IndexVecIntoIter {\n\n    #[doc(hidden)]\n    U32(vec::IntoIter<u32>),\n\n    #[doc(hidden)]\n    USize(vec::IntoIter<usize>),\n}","parent":null,"children":[{"krate":0,"index":1994},{"krate":0,"index":1997}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::into_iter`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256101,"byte_end":256142,"line_start":164,"line_end":164,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":590},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257947,"byte_end":257953,"line_start":220,"line_end":220,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"pub fn sample<R: ?Sized>(&mut R, usize, usize) -> IndexVec where R: Rng","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256879,"byte_end":256954,"line_start":198,"line_end":198,"column_start":1,"column_end":76}},{"value":"/ return them in random order (fully shuffled).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256955,"byte_end":257004,"line_start":199,"line_end":199,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257005,"byte_end":257008,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257009,"byte_end":257085,"line_start":201,"line_end":201,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257086,"byte_end":257163,"line_start":202,"line_end":202,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257164,"byte_end":257183,"line_start":203,"line_end":203,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257184,"byte_end":257187,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ The implementation used is not specified; we automatically select the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257188,"byte_end":257261,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/ fastest available algorithm for the `length` and `amount` parameters","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257262,"byte_end":257334,"line_start":206,"line_end":206,"column_start":1,"column_end":73}},{"value":"/ (based on detailed profiling on an Intel Haswell CPU). Roughly speaking,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257335,"byte_end":257411,"line_start":207,"line_end":207,"column_start":1,"column_end":77}},{"value":"/ complexity is `O(amount)`, except that when `amount` is small, performance","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257412,"byte_end":257490,"line_start":208,"line_end":208,"column_start":1,"column_end":79}},{"value":"/ is closer to `O(amount^2)`, and when `length` is close to `amount` then","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257491,"byte_end":257566,"line_start":209,"line_end":209,"column_start":1,"column_end":76}},{"value":"/ `O(length)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257567,"byte_end":257583,"line_start":210,"line_end":210,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257584,"byte_end":257587,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Note that performance is significantly better over `u32` indices than over","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257588,"byte_end":257666,"line_start":212,"line_end":212,"column_start":1,"column_end":79}},{"value":"/ `u64` indices. Because of this we hide the underlying type behind an","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257667,"byte_end":257739,"line_start":213,"line_end":213,"column_start":1,"column_end":73}},{"value":"/ abstraction, `IndexVec`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257740,"byte_end":257768,"line_start":214,"line_end":214,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257769,"byte_end":257772,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ If an allocation-free `no_std` function is required, it is suggested","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257773,"byte_end":257845,"line_start":216,"line_end":216,"column_start":1,"column_end":73}},{"value":"/ to adapt the internal `sample_floyd` implementation.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257846,"byte_end":257902,"line_start":217,"line_end":217,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257903,"byte_end":257906,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":257907,"byte_end":257939,"line_start":219,"line_end":219,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":597},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":260130,"byte_end":260145,"line_start":273,"line_end":273,"column_start":8,"column_end":23},"name":"sample_weighted","qualname":"::seq::index::sample_weighted","value":"pub fn sample_weighted<R: ?Sized, F, X>(&mut R, usize, F, usize)\n-> Result<IndexVec, WeightedError> where R: Rng, F: Fn(usize) -> X,\nX: Into<f64>","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in an arbitrary order (there is no guarantee of shuffling or\n ordering). The weights are to be provided by the input function `weights`,\n which will be called once for each index.","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259428,"byte_end":259503,"line_start":259,"line_end":259,"column_start":1,"column_end":76}},{"value":"/ return them in an arbitrary order (there is no guarantee of shuffling or","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259504,"byte_end":259580,"line_start":260,"line_end":260,"column_start":1,"column_end":77}},{"value":"/ ordering). The weights are to be provided by the input function `weights`,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259581,"byte_end":259659,"line_start":261,"line_end":261,"column_start":1,"column_end":79}},{"value":"/ which will be called once for each index.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259660,"byte_end":259705,"line_start":262,"line_end":262,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259706,"byte_end":259709,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259710,"byte_end":259786,"line_start":264,"line_end":264,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259787,"byte_end":259864,"line_start":265,"line_end":265,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259865,"byte_end":259884,"line_start":266,"line_end":266,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259885,"byte_end":259888,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This implementation uses `O(length + amount)` space and `O(length)` time","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259889,"byte_end":259965,"line_start":268,"line_end":268,"column_start":1,"column_end":77}},{"value":"/ if the \"nightly\" feature is enabled, or `O(length)` space and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":259966,"byte_end":260031,"line_start":269,"line_end":269,"column_start":1,"column_end":66}},{"value":"/ `O(length + amount * log length)` time otherwise.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":260032,"byte_end":260085,"line_start":270,"line_end":270,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":260086,"byte_end":260089,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":260090,"byte_end":260122,"line_start":272,"line_end":272,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":649},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207178,"byte_end":207189,"line_start":59,"line_end":59,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":653},{"krate":0,"index":655},{"krate":0,"index":657},{"krate":0,"index":663},{"krate":0,"index":669},{"krate":0,"index":673},{"krate":0,"index":675}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206596,"byte_end":206674,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206675,"byte_end":206678,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206679,"byte_end":206752,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206753,"byte_end":206828,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206829,"byte_end":206832,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206833,"byte_end":206840,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206841,"byte_end":206872,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206873,"byte_end":206876,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206877,"byte_end":206914,"line_start":49,"line_end":49,"column_start":1,"column_end":38}},{"value":"/ let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206915,"byte_end":206977,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ bytes.shuffle(&mut rng);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206978,"byte_end":207006,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/ let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207007,"byte_end":207055,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ println!(\"{}\", str);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207056,"byte_end":207080,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207081,"byte_end":207088,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207089,"byte_end":207128,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207129,"byte_end":207140,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207141,"byte_end":207159,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207160,"byte_end":207167,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":650},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207227,"byte_end":207231,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207196,"byte_end":207217,"line_start":60,"line_end":60,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207717,"byte_end":207723,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"pub fn choose<R: ?Sized>(&Self, &mut R) -> Option<&Self::Item> where R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207238,"byte_end":207314,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207319,"byte_end":207338,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207343,"byte_end":207346,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207351,"byte_end":207388,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207393,"byte_end":207396,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207401,"byte_end":207414,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207419,"byte_end":207422,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207427,"byte_end":207434,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207439,"byte_end":207464,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207469,"byte_end":207500,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207505,"byte_end":207508,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207513,"byte_end":207552,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207557,"byte_end":207588,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207593,"byte_end":207640,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207645,"byte_end":207697,"line_start":77,"line_end":77,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207702,"byte_end":207709,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207968,"byte_end":207978,"line_start":86,"line_end":86,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"pub fn choose_mut<R: ?Sized>(&mut Self, &mut R) -> Option<&mut Self::Item>\nwhere R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207802,"byte_end":207872,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207877,"byte_end":207910,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207915,"byte_end":207918,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":207923,"byte_end":207960,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209067,"byte_end":209082,"line_start":115,"line_end":115,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"pub fn choose_multiple<R: ?Sized>(&Self, &mut R, usize)\n-> SliceChooseIter<, Self, Self::Item> where R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"/ Chooses `amount` elements from the slice at random, without repetition,","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208065,"byte_end":208140,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ and in random order. The returned iterator is appropriate both for","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208145,"byte_end":208215,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ collection into a `Vec` and filling an existing buffer (see example).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208220,"byte_end":208293,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208298,"byte_end":208301,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ In case this API is not sufficiently flexible, use [`index::sample`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208306,"byte_end":208379,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208384,"byte_end":208387,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is the same as [`index::sample`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208392,"byte_end":208452,"line_start":95,"line_end":95,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208457,"byte_end":208460,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208465,"byte_end":208478,"line_start":97,"line_end":97,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208483,"byte_end":208490,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208495,"byte_end":208526,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208531,"byte_end":208534,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let mut rng = &mut rand::thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208539,"byte_end":208581,"line_start":101,"line_end":101,"column_start":5,"column_end":47}},{"value":"/ let sample = \"Hello, audience!\".as_bytes();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208586,"byte_end":208633,"line_start":102,"line_end":102,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208638,"byte_end":208641,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ // collect the results into a vector:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208646,"byte_end":208687,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/ let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208692,"byte_end":208768,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208773,"byte_end":208776,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ // store in a buffer:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208781,"byte_end":208806,"line_start":107,"line_end":107,"column_start":5,"column_end":30}},{"value":"/ let mut buf = [0u8; 5];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208811,"byte_end":208838,"line_start":108,"line_end":108,"column_start":5,"column_end":32}},{"value":"/ for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208843,"byte_end":208929,"line_start":109,"line_end":109,"column_start":5,"column_end":91}},{"value":"/     *slot = *b;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208934,"byte_end":208953,"line_start":110,"line_end":110,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208958,"byte_end":208963,"line_start":111,"line_end":111,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208968,"byte_end":208975,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":208980,"byte_end":209005,"line_start":113,"line_end":113,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210278,"byte_end":210293,"line_start":143,"line_end":143,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"pub fn choose_weighted<R: ?Sized, F, B, X>(&Self, &mut R, F)\n-> Result<&Self::Item, WeightedError> where R: Rng, F: Fn(&Self::Item) -> B,\nB: SampleBorrow<X>, X: SampleUniform + for<'a> ::core::ops::AddAssign<&'a X> +\n::core::cmp::PartialOrd<X> + Clone + Default","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose`], but where the likelihood of each outcome may be","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209190,"byte_end":209264,"line_start":118,"line_end":118,"column_start":5,"column_end":79}},{"value":"/ specified.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209269,"byte_end":209283,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209288,"byte_end":209291,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209296,"byte_end":209364,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209369,"byte_end":209443,"line_start":122,"line_end":122,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209448,"byte_end":209519,"line_start":123,"line_end":123,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209524,"byte_end":209527,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209532,"byte_end":209583,"line_start":125,"line_end":125,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted_mut`], [`distributions::weighted`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209588,"byte_end":209654,"line_start":126,"line_end":126,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209659,"byte_end":209662,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209667,"byte_end":209680,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209685,"byte_end":209688,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209693,"byte_end":209700,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209705,"byte_end":209730,"line_start":131,"line_end":131,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209735,"byte_end":209738,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209743,"byte_end":209792,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209797,"byte_end":209828,"line_start":134,"line_end":134,"column_start":5,"column_end":36}},{"value":"/ // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209833,"byte_end":209913,"line_start":135,"line_end":135,"column_start":5,"column_end":85}},{"value":"/ println!(\"{:?}\", choices.choose_weighted(&mut rng, |item| item.1).unwrap().0);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":209918,"byte_end":210000,"line_start":136,"line_end":136,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210005,"byte_end":210012,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ [`choose`]: SliceRandom::choose","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210017,"byte_end":210052,"line_start":138,"line_end":138,"column_start":5,"column_end":40}},{"value":"/ [`choose_weighted_mut`]: SliceRandom::choose_weighted_mut","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210057,"byte_end":210118,"line_start":139,"line_end":139,"column_start":5,"column_end":66}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210123,"byte_end":210186,"line_start":140,"line_end":140,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210191,"byte_end":210216,"line_start":141,"line_end":141,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211390,"byte_end":211409,"line_start":171,"line_end":171,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"pub fn choose_weighted_mut<R: ?Sized, F, B, X>(&mut Self, &mut R, F)\n-> Result<&mut Self::Item, WeightedError> where R: Rng, F: Fn(&Self::Item) ->\nB, B: SampleBorrow<X>, X: SampleUniform +\nfor<'a> ::core::ops::AddAssign<&'a X> + ::core::cmp::PartialOrd<X> + Clone +\nDefault","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose_mut`], but where the likelihood of each outcome may","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210652,"byte_end":210727,"line_start":156,"line_end":156,"column_start":5,"column_end":80}},{"value":"/ be specified.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210732,"byte_end":210749,"line_start":157,"line_end":157,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210754,"byte_end":210757,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210762,"byte_end":210830,"line_start":159,"line_end":159,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210835,"byte_end":210909,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210914,"byte_end":210985,"line_start":161,"line_end":161,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210990,"byte_end":210993,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":210998,"byte_end":211049,"line_start":163,"line_end":163,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted`], [`distributions::weighted`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211054,"byte_end":211116,"line_start":164,"line_end":164,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211121,"byte_end":211124,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ [`choose_mut`]: SliceRandom::choose_mut","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211129,"byte_end":211172,"line_start":166,"line_end":166,"column_start":5,"column_end":48}},{"value":"/ [`choose_weighted`]: SliceRandom::choose_weighted","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211177,"byte_end":211230,"line_start":167,"line_end":167,"column_start":5,"column_end":58}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211235,"byte_end":211298,"line_start":168,"line_end":168,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211303,"byte_end":211328,"line_start":169,"line_end":169,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213423,"byte_end":213447,"line_start":216,"line_end":216,"column_start":8,"column_end":32},"name":"choose_multiple_weighted","qualname":"::seq::SliceRandom::choose_multiple_weighted","value":"pub fn choose_multiple_weighted<R: ?Sized, F, X>(&Self, &mut R, usize, F)\n-> Result<SliceChooseIter<, Self, Self::Item>, WeightedError> where R: Rng,\nF: Fn(&Self::Item) -> X, X: Into<f64>","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Similar to [`choose_multiple`], but where the likelihood of each element's\n inclusion in the output may be specified. The elements are returned in an\n arbitrary, unspecified order.","sig":null,"attributes":[{"value":"/ Similar to [`choose_multiple`], but where the likelihood of each element's","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211776,"byte_end":211854,"line_start":184,"line_end":184,"column_start":5,"column_end":83}},{"value":"/ inclusion in the output may be specified. The elements are returned in an","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211859,"byte_end":211936,"line_start":185,"line_end":185,"column_start":5,"column_end":82}},{"value":"/ arbitrary, unspecified order.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211941,"byte_end":211974,"line_start":186,"line_end":186,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211979,"byte_end":211982,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":211987,"byte_end":212055,"line_start":188,"line_end":188,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212060,"byte_end":212134,"line_start":189,"line_end":189,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212139,"byte_end":212210,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212215,"byte_end":212218,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ If all of the weights are equal, even if they are all zero, each element has","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212223,"byte_end":212303,"line_start":192,"line_end":192,"column_start":5,"column_end":85}},{"value":"/ an equal likelihood of being selected.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212308,"byte_end":212350,"line_start":193,"line_end":193,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212355,"byte_end":212358,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ The complexity of this method depends on the feature `partition_at_index`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212363,"byte_end":212441,"line_start":195,"line_end":195,"column_start":5,"column_end":83}},{"value":"/ If the feature is enabled, then for slices of length `n`, the complexity","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212446,"byte_end":212522,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/ is `O(n)` space and `O(n)` time. Otherwise, the complexity is `O(n)` space and","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212527,"byte_end":212609,"line_start":197,"line_end":197,"column_start":5,"column_end":87}},{"value":"/ `O(n * log amount)` time.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212614,"byte_end":212643,"line_start":198,"line_end":198,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212648,"byte_end":212651,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212656,"byte_end":212669,"line_start":200,"line_end":200,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212674,"byte_end":212677,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212682,"byte_end":212689,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212694,"byte_end":212719,"line_start":203,"line_end":203,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212724,"byte_end":212727,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212732,"byte_end":212781,"line_start":205,"line_end":205,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212786,"byte_end":212817,"line_start":206,"line_end":206,"column_start":5,"column_end":36}},{"value":"/ // First Draw * Second Draw = total odds","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212822,"byte_end":212866,"line_start":207,"line_end":207,"column_start":5,"column_end":49}},{"value":"/ // -----------------------","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212871,"byte_end":212901,"line_start":208,"line_end":208,"column_start":5,"column_end":35}},{"value":"/ // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'b']` in some order.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":212906,"byte_end":213000,"line_start":209,"line_end":209,"column_start":5,"column_end":99}},{"value":"/ // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'c']` in some order.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213005,"byte_end":213099,"line_start":210,"line_end":210,"column_start":5,"column_end":99}},{"value":"/ // (25% * 33%) + (25% * 33%) = 16.6% chance that the output is `['b', 'c']` in some order.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213104,"byte_end":213198,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/ println!(\"{:?}\", choices.choose_multiple_weighted(&mut rng, 2, |item| item.1).unwrap().collect::<Vec<_>>());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213203,"byte_end":213315,"line_start":212,"line_end":212,"column_start":5,"column_end":117}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213320,"byte_end":213327,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ [`choose_multiple`]: SliceRandom::choose_multiple","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213332,"byte_end":213385,"line_start":214,"line_end":214,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213390,"byte_end":213415,"line_start":215,"line_end":215,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214098,"byte_end":214105,"line_start":240,"line_end":240,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"pub fn shuffle<R: ?Sized>(&mut Self, &mut R) where R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213673,"byte_end":213710,"line_start":224,"line_end":224,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213715,"byte_end":213718,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213723,"byte_end":213774,"line_start":226,"line_end":226,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213779,"byte_end":213782,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213787,"byte_end":213800,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213805,"byte_end":213808,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213813,"byte_end":213820,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213825,"byte_end":213856,"line_start":231,"line_end":231,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213861,"byte_end":213886,"line_start":232,"line_end":232,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213891,"byte_end":213894,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213899,"byte_end":213930,"line_start":234,"line_end":234,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213935,"byte_end":213967,"line_start":235,"line_end":235,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":213972,"byte_end":214008,"line_start":236,"line_end":236,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214013,"byte_end":214037,"line_start":237,"line_end":237,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214042,"byte_end":214078,"line_start":238,"line_end":238,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214083,"byte_end":214090,"line_start":239,"line_end":239,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214970,"byte_end":214985,"line_start":260,"line_end":260,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"pub fn partial_shuffle<R: ?Sized>(&mut Self, &mut R, usize)\n-> (&mut [Self::Item], &mut [Self::Item]) where R: Rng","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214165,"byte_end":214210,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214215,"byte_end":214218,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214223,"byte_end":214295,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214300,"byte_end":214369,"line_start":246,"line_end":246,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214374,"byte_end":214415,"line_start":247,"line_end":247,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214420,"byte_end":214423,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214428,"byte_end":214502,"line_start":249,"line_end":249,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214507,"byte_end":214556,"line_start":250,"line_end":250,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214561,"byte_end":214564,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214569,"byte_end":214645,"line_start":252,"line_end":252,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214650,"byte_end":214696,"line_start":253,"line_end":253,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214701,"byte_end":214770,"line_start":254,"line_end":254,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214775,"byte_end":214778,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214783,"byte_end":214856,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214861,"byte_end":214893,"line_start":257,"line_end":257,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214898,"byte_end":214901,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":214906,"byte_end":214962,"line_start":259,"line_end":259,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":677},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215655,"byte_end":215669,"line_start":284,"line_end":284,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":685}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215115,"byte_end":215183,"line_start":266,"line_end":266,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215184,"byte_end":215187,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all iterators `I` where `I: Iterator + Sized`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215188,"byte_end":215266,"line_start":268,"line_end":268,"column_start":1,"column_end":79}},{"value":"/ and provides methods for","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215267,"byte_end":215295,"line_start":269,"line_end":269,"column_start":1,"column_end":29}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215296,"byte_end":215357,"line_start":270,"line_end":270,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215358,"byte_end":215361,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215362,"byte_end":215369,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215370,"byte_end":215404,"line_start":273,"line_end":273,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215405,"byte_end":215408,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215409,"byte_end":215446,"line_start":275,"line_end":275,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215447,"byte_end":215450,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215451,"byte_end":215494,"line_start":277,"line_end":277,"column_start":1,"column_end":26}},{"value":"/ println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215495,"byte_end":215561,"line_start":278,"line_end":278,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215562,"byte_end":215569,"line_start":279,"line_end":279,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215570,"byte_end":215609,"line_start":280,"line_end":280,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215610,"byte_end":215621,"line_start":281,"line_end":281,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215622,"byte_end":215636,"line_start":282,"line_end":282,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215637,"byte_end":215644,"line_start":283,"line_end":283,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":216581,"byte_end":216587,"line_start":300,"line_end":300,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"pub fn choose<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where R: Rng","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215694,"byte_end":215745,"line_start":285,"line_end":285,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215750,"byte_end":215753,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215758,"byte_end":215814,"line_start":287,"line_end":287,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215819,"byte_end":215822,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215827,"byte_end":215897,"line_start":289,"line_end":289,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215902,"byte_end":215976,"line_start":290,"line_end":290,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215981,"byte_end":216048,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":216053,"byte_end":216122,"line_start":292,"line_end":292,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":216127,"byte_end":216190,"line_start":293,"line_end":293,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":216195,"byte_end":216198,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ Note that the output values and the number of RNG samples used","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":216203,"byte_end":216269,"line_start":295,"line_end":295,"column_start":5,"column_end":71}},{"value":"/ depends on size hints. In particular, `Iterator` combinators that don't","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":216274,"byte_end":216349,"line_start":296,"line_end":296,"column_start":5,"column_end":80}},{"value":"/ change the values yielded but change the size hints may result in","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":216354,"byte_end":216423,"line_start":297,"line_end":297,"column_start":5,"column_end":74}},{"value":"/ `choose` returning different elements. If you want consistent results","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":216428,"byte_end":216501,"line_start":298,"line_end":298,"column_start":5,"column_end":78}},{"value":"/ and RNG usage consider using [`IteratorRandom::choose_stable`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":216506,"byte_end":216573,"line_start":299,"line_end":299,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":219216,"byte_end":219229,"line_start":369,"line_end":369,"column_start":8,"column_end":21},"name":"choose_stable","qualname":"::seq::IteratorRandom::choose_stable","value":"pub fn choose_stable<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where\nR: Rng","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218183,"byte_end":218234,"line_start":351,"line_end":351,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218239,"byte_end":218242,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218247,"byte_end":218303,"line_start":353,"line_end":353,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218308,"byte_end":218311,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This method is very similar to [`choose`] except that the result","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218316,"byte_end":218384,"line_start":355,"line_end":355,"column_start":5,"column_end":73}},{"value":"/ only depends on the length of the iterator and the values produced by","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218389,"byte_end":218462,"line_start":356,"line_end":356,"column_start":5,"column_end":78}},{"value":"/ `rng`. Notably for any iterator of a given length this will make the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218467,"byte_end":218539,"line_start":357,"line_end":357,"column_start":5,"column_end":77}},{"value":"/ same requests to `rng` and if the same sequence of values are produced","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218544,"byte_end":218618,"line_start":358,"line_end":358,"column_start":5,"column_end":79}},{"value":"/ the same index will be selected from `self`. This may be useful if you","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218623,"byte_end":218697,"line_start":359,"line_end":359,"column_start":5,"column_end":79}},{"value":"/ need consistent results no matter what type of iterator you are working","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218702,"byte_end":218777,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ with. If you do not need this stability prefer [`choose`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218782,"byte_end":218844,"line_start":361,"line_end":361,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218849,"byte_end":218852,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Note that this method still uses [`Iterator::size_hint`] to skip","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218857,"byte_end":218925,"line_start":363,"line_end":363,"column_start":5,"column_end":73}},{"value":"/ constructing elements where possible, however the selection and `rng`","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":218930,"byte_end":219003,"line_start":364,"line_end":364,"column_start":5,"column_end":78}},{"value":"/ calls are the same in the face of this optimization. If you want to","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":219008,"byte_end":219079,"line_start":365,"line_end":365,"column_start":5,"column_end":76}},{"value":"/ force every element to be created regardless call `.inspect(|e| ())`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":219084,"byte_end":219157,"line_start":366,"line_end":366,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":219162,"byte_end":219165,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ [`choose`]: IteratorRandom::choose","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":219170,"byte_end":219208,"line_start":368,"line_end":368,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":221178,"byte_end":221198,"line_start":422,"line_end":422,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"pub fn choose_multiple_fill<R: ?Sized>(Self, &mut R, &mut [Self::Item])\n-> usize where R: Rng","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220491,"byte_end":220561,"line_start":409,"line_end":409,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220566,"byte_end":220598,"line_start":410,"line_end":410,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220603,"byte_end":220606,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220611,"byte_end":220684,"line_start":412,"line_end":412,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220689,"byte_end":220761,"line_start":413,"line_end":413,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220766,"byte_end":220798,"line_start":414,"line_end":414,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220803,"byte_end":220806,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220811,"byte_end":220889,"line_start":416,"line_end":416,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220894,"byte_end":220972,"line_start":417,"line_end":417,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":220977,"byte_end":221031,"line_start":418,"line_end":418,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":221036,"byte_end":221039,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":221044,"byte_end":221109,"line_start":420,"line_end":420,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":221114,"byte_end":221170,"line_start":421,"line_end":421,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222664,"byte_end":222679,"line_start":462,"line_end":462,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"pub fn choose_multiple<R: ?Sized>(Self, &mut R, usize) -> Vec<Self::Item>\nwhere R: Rng","parent":{"krate":0,"index":677},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"/ Collects `amount` values at random from the iterator into a vector.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":221881,"byte_end":221952,"line_start":446,"line_end":446,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":221957,"byte_end":221960,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `choose_multiple_fill` except for the result type.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":221965,"byte_end":222041,"line_start":448,"line_end":448,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222046,"byte_end":222049,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222054,"byte_end":222127,"line_start":450,"line_end":450,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222132,"byte_end":222204,"line_start":451,"line_end":451,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222209,"byte_end":222241,"line_start":452,"line_end":452,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222246,"byte_end":222249,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ The length of the returned vector equals `amount` unless the iterator","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222254,"byte_end":222327,"line_start":454,"line_end":454,"column_start":5,"column_end":78}},{"value":"/ contains insufficient elements, in which case it equals the number of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222332,"byte_end":222405,"line_start":455,"line_end":455,"column_start":5,"column_end":78}},{"value":"/ elements available.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222410,"byte_end":222433,"line_start":456,"line_end":456,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222438,"byte_end":222441,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222446,"byte_end":222511,"line_start":458,"line_end":458,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222516,"byte_end":222572,"line_start":459,"line_end":459,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":222577,"byte_end":222602,"line_start":460,"line_end":460,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2004},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227705,"byte_end":227720,"line_start":621,"line_end":621,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010}],"decl_id":null,"docs":" An iterator over multiple slice elements.","sig":null,"attributes":[{"value":"/ An iterator over multiple slice elements.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227434,"byte_end":227479,"line_start":614,"line_end":614,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227480,"byte_end":227483,"line_start":615,"line_end":615,"column_start":1,"column_end":4}},{"value":"/ This struct is created by","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227484,"byte_end":227513,"line_start":616,"line_end":616,"column_start":1,"column_end":30}},{"value":"/ [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227514,"byte_end":227600,"line_start":617,"line_end":617,"column_start":1,"column_end":87}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227601,"byte_end":227626,"line_start":618,"line_end":618,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5795,"byte_end":5801,"line_start":184,"line_end":184,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"pub fn random<T>() -> T where Standard: Distribution<T>","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"/ Generates a random value using the thread-local random number generator.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3236,"byte_end":3312,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3313,"byte_end":3316,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This is simply a shortcut for `thread_rng().gen()`. See [`thread_rng`] for","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3317,"byte_end":3395,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/ documentation of the entropy source and [`Standard`] for documentation of","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3396,"byte_end":3473,"line_start":115,"line_end":115,"column_start":1,"column_end":78}},{"value":"/ distributions and type-specific generation.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3474,"byte_end":3521,"line_start":116,"line_end":116,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3522,"byte_end":3525,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ # Provided implementations","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3526,"byte_end":3556,"line_start":118,"line_end":118,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3557,"byte_end":3560,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ The following types have provided implementations that","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3561,"byte_end":3619,"line_start":120,"line_end":120,"column_start":1,"column_end":59}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3620,"byte_end":3684,"line_start":121,"line_end":121,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3685,"byte_end":3688,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3689,"byte_end":3765,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3766,"byte_end":3800,"line_start":124,"line_end":124,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3801,"byte_end":3877,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3878,"byte_end":3946,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":3947,"byte_end":4013,"line_start":127,"line_end":127,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4014,"byte_end":4052,"line_start":128,"line_end":128,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4053,"byte_end":4122,"line_start":129,"line_end":129,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4123,"byte_end":4197,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4198,"byte_end":4246,"line_start":131,"line_end":131,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4247,"byte_end":4323,"line_start":132,"line_end":132,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4324,"byte_end":4354,"line_start":133,"line_end":133,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4355,"byte_end":4358,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Also supported is the generation of the following","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4359,"byte_end":4412,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4413,"byte_end":4472,"line_start":136,"line_end":136,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4473,"byte_end":4476,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4477,"byte_end":4552,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4553,"byte_end":4628,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4629,"byte_end":4709,"line_start":140,"line_end":140,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4710,"byte_end":4775,"line_start":141,"line_end":141,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4776,"byte_end":4855,"line_start":142,"line_end":142,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4856,"byte_end":4923,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4924,"byte_end":4927,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4928,"byte_end":4942,"line_start":145,"line_end":145,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4943,"byte_end":4946,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4947,"byte_end":4954,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/ let x = rand::random::<u8>();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4955,"byte_end":4988,"line_start":148,"line_end":148,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":4989,"byte_end":5011,"line_start":149,"line_end":149,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5012,"byte_end":5015,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ let y = rand::random::<f64>();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5016,"byte_end":5050,"line_start":151,"line_end":151,"column_start":1,"column_end":35}},{"value":"/ println!(\"{}\", y);","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5051,"byte_end":5073,"line_start":152,"line_end":152,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5074,"byte_end":5077,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5078,"byte_end":5124,"line_start":154,"line_end":154,"column_start":1,"column_end":47}},{"value":"/     println!(\"Better lucky than good!\");","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5125,"byte_end":5169,"line_start":155,"line_end":155,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5170,"byte_end":5175,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5176,"byte_end":5183,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5184,"byte_end":5187,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ If you're calling `random()` in a loop, caching the generator as in the","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5188,"byte_end":5263,"line_start":159,"line_end":159,"column_start":1,"column_end":76}},{"value":"/ following example can increase performance.","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5264,"byte_end":5311,"line_start":160,"line_end":160,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5312,"byte_end":5315,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5316,"byte_end":5323,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5324,"byte_end":5342,"line_start":163,"line_end":163,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5343,"byte_end":5346,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5347,"byte_end":5377,"line_start":165,"line_end":165,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5378,"byte_end":5381,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5382,"byte_end":5409,"line_start":167,"line_end":167,"column_start":1,"column_end":28}},{"value":"/     *x = rand::random()","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5410,"byte_end":5437,"line_start":168,"line_end":168,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5438,"byte_end":5443,"line_start":169,"line_end":169,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5444,"byte_end":5447,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ // can be made faster by caching thread_rng","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5448,"byte_end":5495,"line_start":171,"line_end":171,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5496,"byte_end":5499,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5500,"byte_end":5537,"line_start":173,"line_end":173,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5538,"byte_end":5541,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5542,"byte_end":5569,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/     *x = rng.gen();","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5570,"byte_end":5593,"line_start":176,"line_end":176,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5594,"byte_end":5599,"line_start":177,"line_end":177,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5600,"byte_end":5607,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5608,"byte_end":5611,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5612,"byte_end":5653,"line_start":180,"line_end":180,"column_start":1,"column_end":42}},{"value":"cfg(all(feature = \"std\", feature = \"std_rng\"))","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5654,"byte_end":5703,"line_start":181,"line_end":181,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":5778,"byte_end":5787,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23024,"byte_end":23038,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23309,"byte_end":23323,"line_start":84,"line_end":84,"column_start":30,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23333,"byte_end":23342,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":25223,"byte_end":25232,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34680,"byte_end":34687,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35453,"byte_end":35460,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39361,"byte_end":39368,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39525,"byte_end":39532,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40106,"byte_end":40114,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40845,"byte_end":40850,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41150,"byte_end":41164,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":56025,"byte_end":56036,"line_start":741,"line_end":741,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":67043,"byte_end":67051,"line_start":1019,"line_end":1019,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":67117,"byte_end":67132,"line_start":1023,"line_end":1023,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":90060,"byte_end":90073,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94116,"byte_end":94129,"line_start":87,"line_end":87,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":99023,"byte_end":99036,"line_start":223,"line_end":223,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":106209,"byte_end":106222,"line_start":442,"line_end":442,"column_start":30,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":106249,"byte_end":106262,"line_start":444,"line_end":444,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120194,"byte_end":120202,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120343,"byte_end":120351,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120494,"byte_end":120502,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120638,"byte_end":120646,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120821,"byte_end":120829,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":121124,"byte_end":121132,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":130520,"byte_end":130528,"line_start":64,"line_end":64,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":131275,"byte_end":131287,"line_start":85,"line_end":85,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":132056,"byte_end":132064,"line_start":104,"line_end":104,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":133245,"byte_end":133253,"line_start":139,"line_end":139,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":134547,"byte_end":134555,"line_start":181,"line_end":181,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":134899,"byte_end":134907,"line_start":195,"line_end":195,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":15187,"byte_end":15195,"line_start":218,"line_end":218,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":15763,"byte_end":15771,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163001,"byte_end":163002,"line_start":303,"line_end":303,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179496,"byte_end":179503,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179657,"byte_end":179664,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":180528,"byte_end":180537,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":180678,"byte_end":180687,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185568,"byte_end":185580,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":186407,"byte_end":186419,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":186958,"byte_end":186970,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":187297,"byte_end":187309,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":187599,"byte_end":187612,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":188455,"byte_end":188468,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":191044,"byte_end":191057,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":191496,"byte_end":191509,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195438,"byte_end":195445,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195741,"byte_end":195748,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198411,"byte_end":198417,"line_start":40,"line_end":40,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198873,"byte_end":198879,"line_start":62,"line_end":62,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":199188,"byte_end":199194,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203863,"byte_end":203872,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203970,"byte_end":203979,"line_start":98,"line_end":98,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":205064,"byte_end":205073,"line_start":130,"line_end":130,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252661,"byte_end":252669,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":254089,"byte_end":254097,"line_start":88,"line_end":88,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":254506,"byte_end":254514,"line_start":102,"line_end":102,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255104,"byte_end":255112,"line_start":118,"line_end":118,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255224,"byte_end":255232,"line_start":125,"line_end":125,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255533,"byte_end":255545,"line_start":141,"line_end":141,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256080,"byte_end":256092,"line_start":162,"line_end":162,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256316,"byte_end":256332,"line_start":173,"line_end":173,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256857,"byte_end":256873,"line_start":195,"line_end":195,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":261806,"byte_end":261813,"line_start":326,"line_end":326,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":261977,"byte_end":261984,"line_start":331,"line_end":331,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":262257,"byte_end":262264,"line_start":338,"line_end":338,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":262384,"byte_end":262391,"line_start":343,"line_end":343,"column_start":20,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227401,"byte_end":227402,"line_start":611,"line_end":611,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227953,"byte_end":227968,"line_start":628,"line_end":628,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":228420,"byte_end":228435,"line_start":643,"line_end":643,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":2928,"byte_end":2941,"line_start":98,"line_end":98,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":16}},{"kind":"Mod","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11462,"byte_end":11469,"line_start":108,"line_end":108,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":47}},{"kind":"Mod","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":11661,"byte_end":11669,"line_start":113,"line_end":113,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":155}},{"kind":"Mod","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":2951,"byte_end":2958,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":333}},{"kind":"Mod","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":2977,"byte_end":2981,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":393}},{"kind":"Mod","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176675,"byte_end":176682,"line_start":100,"line_end":100,"column_start":33,"column_end":40},"ref_id":{"krate":0,"index":394}},{"kind":"Mod","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mod.rs","byte_start":176693,"byte_end":176697,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":483}},{"kind":"Mod","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/lib.rs","byte_start":2991,"byte_end":2994,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":540}},{"kind":"Mod","span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":206315,"byte_end":206320,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":541}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23024,"byte_end":23038,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":756},"to":{"krate":1,"index":6560}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23309,"byte_end":23323,"line_start":84,"line_end":84,"column_start":30,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":756},"to":{"krate":4,"index":1720}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":23333,"byte_end":23342,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":749},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/bernoulli.rs","byte_start":25223,"byte_end":25232,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":749},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":34680,"byte_end":34687,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35453,"byte_end":35460,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":770},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":35876,"byte_end":35881,"line_start":212,"line_end":212,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":74}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":36456,"byte_end":36461,"line_start":227,"line_end":227,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":76}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39361,"byte_end":39368,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":1952}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":39525,"byte_end":39532,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":1952}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40106,"byte_end":40114,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":104},"to":{"krate":0,"index":100}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":40845,"byte_end":40850,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"kind":{"Impl":{"id":9}},"from":{"krate":1,"index":30457},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":41150,"byte_end":41164,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"kind":{"Impl":{"id":10}},"from":{"krate":1,"index":30526},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":56025,"byte_end":56036,"line_start":741,"line_end":741,"column_start":25,"column_end":36},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1035},"to":{"krate":0,"index":76}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":67043,"byte_end":67051,"line_start":1019,"line_end":1019,"column_start":24,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":34257},"to":{"krate":0,"index":74}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/uniform.rs","byte_start":67117,"byte_end":67132,"line_start":1023,"line_end":1023,"column_start":25,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1086},"to":{"krate":0,"index":76}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted.rs","byte_start":90060,"byte_end":90073,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":94116,"byte_end":94129,"line_start":87,"line_end":87,"column_start":37,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":99023,"byte_end":99036,"line_start":223,"line_end":223,"column_start":33,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1129},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":106209,"byte_end":106222,"line_start":442,"line_end":442,"column_start":30,"column_end":43},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1140},"to":{"krate":4,"index":1720}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/weighted_index.rs","byte_start":106249,"byte_end":106262,"line_start":444,"line_end":444,"column_start":23,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1140},"to":{"krate":1,"index":6560}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120194,"byte_end":120202,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120343,"byte_end":120351,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120494,"byte_end":120502,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120638,"byte_end":120646,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":120821,"byte_end":120829,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/integer.rs","byte_start":121124,"byte_end":121132,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":130520,"byte_end":130528,"line_start":64,"line_end":64,"column_start":29,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":131275,"byte_end":131287,"line_start":85,"line_end":85,"column_start":27,"column_end":39},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1236},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":132056,"byte_end":132064,"line_start":104,"line_end":104,"column_start":29,"column_end":37},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":133245,"byte_end":133253,"line_start":139,"line_end":139,"column_start":27,"column_end":35},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":134547,"byte_end":134555,"line_start":181,"line_end":181,"column_start":37,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/other.rs","byte_start":134899,"byte_end":134907,"line_start":195,"line_end":195,"column_start":39,"column_end":47},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1615},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/utils.rs","byte_start":146427,"byte_end":146432,"line_start":238,"line_end":238,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":292}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/utils.rs","byte_start":146638,"byte_end":146643,"line_start":245,"line_end":245,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":296}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/utils.rs","byte_start":147088,"byte_end":147093,"line_start":266,"line_end":266,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":301}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":15187,"byte_end":15195,"line_start":218,"line_end":218,"column_start":28,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1603},"to":{"krate":1,"index":5281}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/distributions/mod.rs","byte_start":15763,"byte_end":15771,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1603},"to":{"krate":1,"index":5544}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":155287,"byte_end":155294,"line_start":55,"line_end":55,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":18,"index":140},"to":{"krate":0,"index":363}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rng.rs","byte_start":163001,"byte_end":163002,"line_start":303,"line_end":303,"column_start":35,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":363}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179496,"byte_end":179503,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1900},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":179657,"byte_end":179664,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1900},"to":{"krate":18,"index":140}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":180528,"byte_end":180537,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1906},"to":{"krate":1,"index":6560}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/read.rs","byte_start":180678,"byte_end":180687,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1906},"to":{"krate":4,"index":1720}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":185568,"byte_end":185580,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1911},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":186407,"byte_end":186419,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1911},"to":{"krate":18,"index":140}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":186958,"byte_end":186970,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1911},"to":{"krate":1,"index":1732}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":187297,"byte_end":187309,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1911},"to":{"krate":18,"index":145}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":187599,"byte_end":187612,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1920},"to":{"krate":18,"index":22}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":188455,"byte_end":188468,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":191044,"byte_end":191057,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1920},"to":{"krate":1,"index":1732}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/adapter/reseeding.rs","byte_start":191496,"byte_end":191509,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1920},"to":{"krate":18,"index":145}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195438,"byte_end":195445,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1932},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/mock.rs","byte_start":195741,"byte_end":195748,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1932},"to":{"krate":18,"index":140}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198411,"byte_end":198417,"line_start":40,"line_end":40,"column_start":18,"column_end":24},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1946},"to":{"krate":18,"index":140}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":198873,"byte_end":198879,"line_start":62,"line_end":62,"column_start":22,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1946},"to":{"krate":18,"index":146}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/std.rs","byte_start":199188,"byte_end":199194,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1946},"to":{"krate":18,"index":145}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203863,"byte_end":203872,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1960},"to":{"krate":1,"index":2022}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":203970,"byte_end":203979,"line_start":98,"line_end":98,"column_start":18,"column_end":27},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1960},"to":{"krate":18,"index":140}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/rngs/thread.rs","byte_start":205064,"byte_end":205073,"line_start":130,"line_end":130,"column_start":20,"column_end":29},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1960},"to":{"krate":18,"index":145}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":252661,"byte_end":252669,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":254089,"byte_end":254097,"line_start":88,"line_end":88,"column_start":23,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1971},"to":{"krate":1,"index":5187}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":254506,"byte_end":254514,"line_start":102,"line_end":102,"column_start":20,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1971},"to":{"krate":1,"index":1760}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255104,"byte_end":255112,"line_start":118,"line_end":118,"column_start":25,"column_end":33},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1971},"to":{"krate":1,"index":1952}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255224,"byte_end":255232,"line_start":125,"line_end":125,"column_start":27,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1971},"to":{"krate":1,"index":1952}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":255533,"byte_end":255545,"line_start":141,"line_end":141,"column_start":23,"column_end":35},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1982},"to":{"krate":1,"index":5281}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256080,"byte_end":256092,"line_start":162,"line_end":162,"column_start":32,"column_end":44},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1982},"to":{"krate":1,"index":5235}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256316,"byte_end":256332,"line_start":173,"line_end":173,"column_start":19,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1993},"to":{"krate":1,"index":5281}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":256857,"byte_end":256873,"line_start":195,"line_end":195,"column_start":28,"column_end":44},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1993},"to":{"krate":1,"index":5235}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":261806,"byte_end":261813,"line_start":326,"line_end":326,"column_start":28,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":606},"to":{"krate":1,"index":1797}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":261977,"byte_end":261984,"line_start":331,"line_end":331,"column_start":21,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":606},"to":{"krate":1,"index":1786}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":262257,"byte_end":262264,"line_start":338,"line_end":338,"column_start":27,"column_end":34},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":606},"to":{"krate":1,"index":1760}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":262384,"byte_end":262391,"line_start":343,"line_end":343,"column_start":20,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":606},"to":{"krate":1,"index":1765}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":267134,"byte_end":267138,"line_start":471,"line_end":471,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2044},"to":{"krate":0,"index":627}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":267141,"byte_end":267151,"line_start":471,"line_end":471,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1797},"to":{"krate":0,"index":627}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":267154,"byte_end":267157,"line_start":471,"line_end":471,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1786},"to":{"krate":0,"index":627}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":267160,"byte_end":267169,"line_start":471,"line_end":471,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":1760},"to":{"krate":0,"index":627}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":267172,"byte_end":267174,"line_start":471,"line_end":471,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":1,"index":1765},"to":{"krate":0,"index":627}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":267177,"byte_end":267190,"line_start":471,"line_end":471,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":74},"to":{"krate":0,"index":627}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":267209,"byte_end":267213,"line_start":472,"line_end":472,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":6743},"to":{"krate":0,"index":627}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/index.rs","byte_start":267227,"byte_end":267236,"line_start":472,"line_end":472,"column_start":37,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":2130},"to":{"krate":0,"index":627}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215671,"byte_end":215679,"line_start":284,"line_end":284,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":5281},"to":{"krate":0,"index":677}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":215682,"byte_end":215687,"line_start":284,"line_end":284,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2039},"to":{"krate":0,"index":677}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227401,"byte_end":227402,"line_start":611,"line_end":611,"column_start":28,"column_end":29},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":724},"to":{"krate":0,"index":677}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":227953,"byte_end":227968,"line_start":628,"line_end":628,"column_start":73,"column_end":88},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2004},"to":{"krate":1,"index":5281}},{"span":{"file_name":"/home/elefant-i3/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.0/src/seq/mod.rs","byte_start":228420,"byte_end":228435,"line_start":643,"line_end":643,"column_start":9,"column_end":24},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2004},"to":{"krate":1,"index":5235}}]}